/* more functions to move to library Pulses:
void Pulses::short_info(void) {
  if ((*MENU).verbosity > VERBOSITY_SOME) {
    (*MENU).ln();
    time_info();
  }

  if ((*MENU).verbosity >= VERBOSITY_SOME) {
    (*MENU).ln();
    show_selected_mask();
  }

  (*MENU).ln();
  selected_or_flagged_pulses_info_lines();
}


void Pulses::selected_or_flagged_pulses_info_lines(void) {
  int count=0;
  for (int pulse=0; pulse<pl_max; ++pulse)
    if (pulses[pulse].flags || pulse_is_selected(pulse)) { // any flags || selected
      pulse_info_1line(pulse);
      count++;
    }

  if (count == 0) {
    (*MENU).outln(F("no selected or flagged pulses"));

    if(how_many_selected())
      show_selected_mask();
  }

  (*MENU).ln();
}


void display_payload(int pulse) {
  void (*scratch)(int);
  scratch=&click;
  if (pulses[pulse].periodic_do == scratch) {
    (*MENU).out("click  ");
    (*MENU).out((int) pulses[pulse].gpio);
    return;
  }

#ifdef IMPLEMENT_TUNING		// implies floating point
  scratch=&tuned_sweep_click;
  if (pulses[pulse].periodic_do == scratch) {
    (*MENU).out(F("tuned_sweep_click "));
    (*MENU).out((int) pulses[pulse].gpio);
    return;
  }

  scratch=&sweep_click;
  if (pulses[pulse].periodic_do == scratch) {
    (*MENU).out(F("sweep_click "));
    (*MENU).out((int) pulses[pulse].gpio);
    return;
  }

  scratch=&sweep_click_0;
  if (pulses[pulse].periodic_do == scratch) {
    (*MENU).out(F("sweep_click_0 "));
    (*MENU).out((int) pulses[pulse].gpio);
    return;
  }
#endif	// #ifdef IMPLEMENT_TUNING	implies floating point

  scratch=&do_jiffle;
  if (pulses[pulse].periodic_do == scratch) {
    (*MENU).out(F("do_jiffle:"));
    (*MENU).out(array2name(JIFFLES, (unsigned int*) pulses[pulse].data));
    (*MENU).space(2);
    (*MENU).out((int) pulses[pulse].gpio);
    return;
  }

  scratch=&do_throw_a_jiffle;
  if (pulses[pulse].periodic_do == scratch) {
    (*MENU).out(F("seed jiff:"));
    (*MENU).out(array2name(JIFFLES, (unsigned int*) pulses[pulse].data));
    (*MENU).space(2);
    (*MENU).out((int) click_pin[pulse]);
    return;
  }

  scratch=&pulse_info;
  if (pulses[pulse].periodic_do == scratch) {
    (*MENU).out(F("pulse_info"));
    return;
  }

  scratch=&pulse_info_1line;
  if (pulses[pulse].periodic_do == scratch) {
    (*MENU).out(F("info line"));
    (*MENU).tab(2);
    return;
  }

  scratch=NULL;
  if (pulses[pulse].periodic_do == scratch) {
    (*MENU).out(F("NULL\t"));		// 8 char positions at least
    return;
  }

  (*MENU).out(F("UNKNOWN\t"));
}


void Pulses::pulse_info_1line(int pulse) {	// one line pulse info, short version
  unsigned long realtime=micros();		// let's take time *before* serial output

  if (pulse_is_selected(pulse))
    (*MENU).out('*');
  else
    (*MENU).space();


  (*MENU).out(F(" PULSE "));
  if (pulse<100)	// left padding 'pulse'
    (*MENU).space();
  if (pulse<10)
    (*MENU).space();
  (*MENU).out(pulse);
  (*MENU).slash();
  (*MENU).out((unsigned int) pulses[pulse].counter);
  // right padding 'pulses[pulse].counter'
  if (pulses[pulse].counter<100000)
    (*MENU).space();
  if (pulses[pulse].counter<10000)
    (*MENU).space();
  if (pulses[pulse].counter<1000)
    (*MENU).space();
  if (pulses[pulse].counter<100)
    (*MENU).space();
  if (pulses[pulse].counter<10)
    (*MENU).space();

  (*MENU).space();
  (*MENU).out_flags_();
  (*MENU).outBIN(pulses[pulse].flags, sizeof(pulse_flags_t) * 8);	// TODO: mnemonic output

  if (pulses[pulse].action_flags) {
    (*MENU).out(F(" Af: "));
    show_action_flags(pulses[pulse].action_flags);
  }

  (*MENU).tab();
  display_payload(pulse);

  if(pulses[pulse].dest_action_flags || \
     pulses[pulse].dac1_intensity || pulses[pulse].dac2_intensity) {
    (*MENU).tab();
    (*MENU).out(F("dAf: "));
    show_action_flags(pulses[pulse].dest_action_flags);

    (*MENU).out(F(" i1:"));
    (*MENU).pad(pulses[pulse].dac1_intensity, 4);

    (*MENU).out(F("i2:"));
    (*MENU).pad(pulses[pulse].dac2_intensity, 4);
  }

  if ((*MENU).verbosity >= VERBOSITY_SOME) {
    (*MENU).tab();
    print_period_in_time_units(pulse);
  }

  if ((*MENU).verbosity > VERBOSITY_SOME) {
    struct time sum = pulses[pulse].next;
    get_now();
    struct time delta =now;
    sub_time(&delta, &sum);

    (*MENU).tab();
    (*MENU).out(F("expected in"));
    display_realtime_sec(sum);
  }

  if (pulse_is_selected(pulse)) {
    (*MENU).space();
    (*MENU).out('*');
  }

  (*MENU).ln();
}
*/


/*
// test hardware connections on CLICK_PULSES		// test, normally not needed
void click_connection_test(int wait) {	// wait==0 steps through the first round, then normal
  char next_token;
  MENU.outln(F("pulse@pin"));

  for (int pulse=0; pulse<CLICK_PULSES; pulse++)	// start all LOW
    digitalWrite(click_pin[pulse], LOW);

  MENU.ln();
  for (int pulse=0; pulse<CLICK_PULSES; pulse++) {
//    if (wait)
//      delay(wait);
//    else {
//      while (!Serial.available()) { ;}	// simple minded ;)
//      Serial.read();
//    }
    delay(wait);
    MENU.out(pulse); MENU.out('@'); MENU.out(click_pin[pulse]); MENU.tab();
    digitalWrite(click_pin[pulse], HIGH);
  }

  MENU.ln();
  for (int pulse=0; pulse<CLICK_PULSES; pulse++) {
    delay(wait);
    MENU.out(pulse); MENU.out('@'); MENU.out(click_pin[pulse]); MENU.tab();
    digitalWrite(click_pin[pulse], LOW);
  }

  MENU.ln();
  for (int pulse=0; pulse<CLICK_PULSES; pulse++) {
    delay(wait);
    MENU.out(pulse); MENU.out('@'); MENU.out(click_pin[pulse]); MENU.tab();
    digitalWrite(click_pin[pulse], HIGH);
  }
  MENU.ln();
}							// leave all HIGH
*/



/*
char wait_for_input() {
  MENU.outln(F("waits for input"));
    //  char next_token=(char) MENU.cb_peek();
  int next_token=MENU.next_input_token();
  while (next_token == EOF) {
    next_token=MENU.next_input_token();
  }
  return (char) next_token;
}
*/


// left over test code	################ FIXME: look over and delete ################
//  case 'D':	// DADA debug
// for tuning
//	    int INP;
//	    for (int pulse=0; pulse<pl_max; pulse++)
//	      if ((PULSES.pulse_is_selected(pulse))) && PULSES.pulses[pulse].period.time) {
//		MENU.outln(pulse);
//
//		while (MENU.cb_peek()==EOF)
//		  delay(0.1);
//
//		INP=MENU.cb_peek();
//		MENU.out("DADA	");
//		MENU.outln(INP);
//		MENU.drop_input_token();
//	      }
//	MENU.outln("done");

    //    MENU.play_KB_macro("");
    //    MENU.play_KB_macro("X E12! .a g *16 J22-");
    //    MENU.play_KB_macro("X E12! .a N *16 J23-");		// :)

    // MENU.play_KB_macro("X E12! .a g *16 J24-");
    // MENU.play_KB_macro("X E12! .a N *16 J25-");		// :)
    // MENU.play_KB_macro("X E12! .a N *16 J26-");
    // MENU.play_KB_macro("X E12! .a N *32 J27-.");		// :)

    //    click_connection_test(5000);
    //    click_connection_test(0);	// steps through the first round, then normal
    //     MENU.outln(F("'D' 1"));
    //     pulse_info_1line(0);
    //     MENU.outln(F("'D' 2"));
    //    MENU.outln(HARMONICAL.harmonical_base);

    //    MENU.outln(F("small primes:"));
    //    for (int i=0; HARMONICAL.small_primes[i]; i++) {
    //      MENU.out(i+1);
    //      MENU.tab();
    //      MENU.outln(HARMONICAL.small_primes[i]);
    //    }
//	    {
//	      unsigned long lcm=1L;
//	      for (int pulse=0; pulse<pl_max; pulse++) {
//		if (PULSES.pulse_is_selected(pulse)) {
//		  MENU.out(pulse); MENU.tab(); PULSES.pulses[pulse].period.time; MENU.tab();
//		  lcm = HARMONICAL.LCM(lcm, PULSES.pulses[pulse].period.time);
//		  MENU.outln(lcm);
//		}
//	      }
//
//	      MENU.out(F("==> lcm ")); MENU.out(lcm);
//	      struct time length;
//	      length.time = lcm;
//	      length.overflow = 0;
//	      PULSES.display_realtime_sec(length);
//	      MENU.ln();
//
//	      for (int pulse=0; pulse<pl_max; pulse++)
//		if ((PULSES.pulse_is_selected(pulse))) && PULSES.pulses[pulse].period.time) {
//		  MENU.out(pulse);
//		  MENU.tab();
//		  MENU.outln(lcm/PULSES.pulses[pulse].period.time);
//		}
//	    }

//	    {
//	    unsigned int lcm=1;
//	    // simplest case for test: 0 to voices-1
//	    for (int pulse=voices-1; pulse>-1; pulse--)
//	      if (PULSES.pulse_is_selected(pulse)) {
//		lcm = LCM(PULSES.pulses[pulse].period.time, lcm);
//		MENU.outln(lcm/PULSES.pulses[0].period.time);
//	      }
//	    }
//

//    fraction bruch1;
//    fraction bruch2;
//    bruch1.multiplier=11;
//    bruch1.divisor=44;
//    //    reduce_fraction(&bruch1);
//    bruch2.multiplier=100;
//    bruch2.divisor=300;
//
//    HARMONICAL.add_fraction(&bruch1, &bruch2);
//    MENU.out(bruch2.multiplier); MENU.slash(); MENU.outln(bruch2.divisor);


    // load2_jiffle_RAM(gling128);	// zero terminated
    // load2_jiffle_RAM(jiffletab_december_pizzicato);
    // display_jiffletab(jiffle);

    //    tuning = PULSES.tuning; // FIXME: workaround for having all 3 sweep implementations in parallel
    //    sweep_info();
    //    {
    //      int fastest=PULSES.fastest_pulse();
    //      MENU.ln();
    //      PULSES.deactivate_pulse(fastest);
    //    }
//    break;


/* **************************************************************** */

/* **************** Inputs **************** */
/*
#include <Inputs.h>
Inputs INPUTS(2);
*/
/* **************************************************************** */


/*
#undef MENU_OUTSTREAM2
// see: https://stackoverflow.com/questions/11826554/standard-no-op-output-stream
#include <iostream>
class NullBuffer :  public std::streambuf
{
public:
  int overflow(int c) { return c; }
  // streambuf::overflow is the function called when the buffer has to output data to the actual destination of the stream.
  // The NullBuffer class above does nothing when overflow is called so any stream using it will not produce any output.
};

NullBuffer null_buffer;

// std::ostream null_stream(&null_buffer);

// #define MENU_OUTSTREAM2	null_buffer


// see: https://stackoverflow.com/questions/11826554/standard-no-op-output-stream
// â€“ Sjoerd Aug 6 '12
class NullStream : public std::ostream
{ public: NullStream() : std::ostream(&m_sb) {}
   private: NullBuffer m_sb; };

NullStream null_stream;
#define MENU_OUTSTREAM2	null_stream
*/



/*
  analogWrite_ESP32.h
*/

#ifdef ESP32	// ESP32 has no analogWrite() yet
  #ifndef ANALOGWRITE_ESP32_H
    #define ANALOGWRITE_ESP32_H

    void analogWrite(int channel, int value) {
      ledcWrite(channel, value);
    }
#endif


  #endif // ! ANALOGWRITE_ESP32_H
#endif // ESP32


/* **************************************************************** */
// http://www.cs.technion.ac.il/~imaman/programs/teestream.html

#include <iostream>
#include <fstream>

template<typename Elem, typename Traits = std::char_traits<Elem> >
struct basic_TeeStream : std::basic_ostream<Elem,Traits>
{
   typedef std::basic_ostream<Elem,Traits> SuperType;

   basic_TeeStream(std::ostream& o1, std::ostream& o2)
      :  SuperType(o1.rdbuf()), o1_(o1), o2_(o2) { }

   basic_TeeStream& operator<<(SuperType& (__cdecl *manip)(SuperType& ))
   {
      o1_ << manip;
      o2_ << manip;
      return *this;
   }

   template<typename T>
   basic_TeeStream& operator<<(const T& t)
   {
      o1_ << t;
      o2_ << t;
      return *this;
   }

private:
   std::ostream& o1_;
   std::ostream& o2_;
};
/* **************************************************************** */

/* **************************************************************** */
// http://wordaligned.org/articles/cpp-streambufs

#include <streambuf>

class teebuf: public std::streambuf
{
public:
    // Construct a streambuf which tees output to both input
    // streambufs.
    teebuf(std::streambuf * sb1, std::streambuf * sb2);
protected:
    virtual int overflow(int);
private:
    std::streambuf * sb1;
    std::streambuf * sb2;
};

// teebuf TEE_OUTSTREAM(std::cout, std::cout);

/* **************************************************************** */



/* **************************************************************** */
// as we have AUTOSTART now  I remove the following very old code from late in setup()

/* ****************  DEMO SETUPS  **************** */
  // for a demo one of these could be called from here:

  // void setup_jiffle128(bool inverse, int voices, unsigned int multiplier, unsigned int divisor, int sync)
  // setup_jiffle128(false, CLICK_PULSES, 2, 1, 15);	// 12345678 slow beginning of voices, nice

  // init_div_123456(bool inverse, int voices, unsigned int multiplier, unsigned int divisor, int sync);
  // init_div_123456(false, CLICK_PULSES, 1, 1, 0);

  // setup_jiffles0(false, CLICK_PULSES, 2, 3, 1);	// setup for ESP8266 Frog Orchester

  //       void setup_jiffles2345(bool inverse, int voices, unsigned int multiplier, unsigned int divisor, int sync);
  // setup_jiffles2345(0, CLICK_PULSES, 1, 2, 0);

  // init_123456(bool inverse, int voices, unsigned int multiplier, unsigned int divisor, int sync);
  // init_123456(false, CLICK_PULSES, 1, 1, 0);

  // init_chord_1345689a(bool inverse, int voices, unsigned int multiplier, unsigned int divisor, int sync);
  // init_chord_1345689a(0, CLICK_PULSES, 1, 1, 0);

  // init_rhythm_1   (0, CLICK_PULSES, 1, 6*7, 1);
  // init_rhythm_2(0, CLICK_PULSES, 1, 1, 5);
  // init_rhythm_3(0, CLICK_PULSES, 1, 1, 3);
  // init_rhythm_4(0, CLICK_PULSES, 1, 7*3, 1);

  // void setup_jifflesNEW(int sync, unsigned int multiplier, unsigned int divisor);
  // setup_jifflesNEW(0, CLICK_PULSES, 3, 1, 3);

  // init_pentatonic(0, CLICK_PULSES, 1, 1, 1);	// Harmonical Frogs Choir	Frogs set 2
  // init_pentatonic(0, CLICK_PULSES, 1, 6, 1);	// 8 strings on piezzos 2016-12-12

  // 2 strings setup 2016-12-15 sweep and drone on piezzos
  //  multiplier=1;
  //  divisor=5800;
  //  en_click(0);
  //  en_sweep_click(1);
  //  PULSES.selected_pulses = (pulses_mask_t) 3;
  //  PULSES.reset_and_edit_selected();
  //  activate_selected_synced_now(sync);	// FIXME:	something's wrong :(	################


//	  // testing ratios, prepare_ratios():
//	  // void prepare_ratios(bool inverse, int voices, unsigned int multiplier, unsigned int divisor, int sync, unsigned int *ratios)
//	  ratios = pentatonic_minor;
//	  // ratios = european_pentatonic;
//	  // ratios = ratios_quot;
//	  // ratios = ratios_int;
//	  PULSES.selected_pulses = (pulses_mask_t) ~0;
//	  // or: if nothing is selected all pulses with flags==0 get selected.
//	  int prepared = prepare_ratios(false, 8, 1, 1, 0, ratios);
//	  if (prepared != 8)
//	    MENU.out(F("prepared ")); MENU.out(prepared); MENU.slash(); MENU.outln(voices);
//	  //  PULSES.selected_pulses=0;


// working on:
// prepare_magnets(bool inverse, int voices, unsigned int multiplier, unsigned int divisor, int sync) {
// pentatonic steel strings on 8 magnets
//			  ratios = pentatonic_minor;


/* ****************  END DEMO SETUPS  **************** */
/* **************************************************************** */

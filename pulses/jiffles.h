#ifndef JIFFLES_h
#ifndef RAM_IS_SCARE	// enough RAM?

// jiffletabs *MUST* have 2 trailing zeros

// pre defined jiffles:
const unsigned int harmonics4[] = {1,1,1024, 1,2,1024, 1,3,1024, 1,4,1024, 0,0};	// magnets on strings experiments
const unsigned int ting1024[] = {1,4096,64, 1,1024,128, 1,1024*3,128, 1,1024*2,128, 1,1024*8,64, 1,1024,64, 0,0}; // magnet strings experiments 2
// const unsigned int ting1024[] = {1,4096,64, 1,1024,128, 0,0};			// magnet strings experiments 2
// const unsigned int ting4096[] = {1,4096,1024, -1,0,0};			// magnet strings experiments 2
const unsigned int ting4096[] = {1,4096,1024, 0,0,0};			// TODO: use d4096_1024	magnet strings experiments 2, KALIMBA7

const unsigned int d4096_3072[] = {1,4096,3072, 0,0,0};	// == 3/4
const unsigned int d4096_2048[] = {1,4096,2048, 0,0,0};	// == 1/2
const unsigned int d4096_1536[] = {1,4096,1536, 0,0,0};
const unsigned int d4096_1024[] = {1,4096,1024, 0,0,0};	// == 1/4	== ting4096
const unsigned int d4096_768[] = {1,4096,768, 0,0,0};
const unsigned int d4096_512[] = {1,4096,512, 0,0,0};
const unsigned int d4096_384[] = {1,4096,384, 0,0,0};
const unsigned int d4096_256[] = {1,4096,256, 0,0,0};
const unsigned int d4096_192[] = {1,4096,192, 0,0,0};
const unsigned int d4096_128[] = {1,4096,128, 0,0,0};
const unsigned int d4096_96[] = {1,4096,96, 0,0,0};
const unsigned int d4096_64[] = {1,4096,64, 0,0,0};
const unsigned int d4096_48[] = {1,4096,48, 0,0,0};
const unsigned int d4096_32[] = {1,4096,32, 0,0,0};
const unsigned int d4096_24[] = {1,4096,24, 0,0,0};
const unsigned int d4096_16[] = {1,4096,16, 0,0,0};
const unsigned int d4096_12[] = {1,4096,12, 0,0,0};
const unsigned int d4096_8[] = {1,4096,8, 0,0,0};
const unsigned int d4096_6[] = {1,4096,6, 0,0,0};
const unsigned int d4096_4[] = {1,4096,4, 0,0,0};
const unsigned int d4096_2[] = {1,4096,2, 0,0,0};

const unsigned int din__dididi_dixi[] = {1,4096,1024, 1,4,1, 1,4096,32, 1,16,1, 1,4096,32, 1,16,1, 1,4096,64, 1,16,1, 1,8192,64, 1,32,1,
				   3,4*8192,63, 0,0,0};
const unsigned int din__dididi_dix[] = {1,4096,1024, 1,4,1, 1,4096,32, 1,16,1, 1,4096,32, 1,16,1, 1,4096,64, 1,16,1, 1,8192,64, 0,0,0};
const unsigned int din__dididi[] = {1,4096,1024, 1,4,1, 1,4096,32, 1,16,1, 1,4096,32, 1,16,1, 1,4096,64, 0,0,0};
const unsigned int din_dididi[] = {1,4096,512, 1,8,2, 1,4096,64, 1,16,1, 1,4096,32, 1,16,1, 1,4096,15, 0,0,0};
const unsigned int ding_ditditdit[] = {1,4096,1024, 1,8,1, 1,4096,16, 1,8,1, 1,4096,8, 1,8,1, 1,4096,7, 0,0,0};
const unsigned int diing_ditditdit[] = {1,4096,2048, 1,8,1, 1,4096,16, 1,8,1, 1,4096,8, 1,8,1, 1,4096,6, 0,0,0};
// peepeep4096[] for tuning
const unsigned int peepeep4096[] = {1,4096,2048, 1,8*4096,1, 1,4096,256, 1,8*4096,1, 1,4096,256, 1,8*4096,1, 1,4096,256, 1,8*4096,1, 0,0};
// const unsigned int arpeggio4096[] = {4,4096*4,128, 4,4096*3,128, 4,4096*4,128, 4,4096*5,128, 4,4096*6,64, 0,0}; // pezzo strings E16

const unsigned int arpeggio4096[] = {
  64,4096,1, 1,4096,256,  64,4096*2,1, 1,4096*2,256, 64,4096*3,1, 1,4096*3,256, 64,4096*5,1, 1,4096*5,256,
  64,4096*6,1, 1,4096*6,256, 64,4096*8,1, 1,4096*8,256, 0
  };
const unsigned int arpeggio4096down[] = {
  64,4096*8,1, 1,4096*8,256, 64,4096*6,1, 1,4096*6,256, 64,4096*5,1, 1,4096*5,256, 64,4096*4,1, 1,4096*4,256,
  64,4096*3,1, 1,4096*3,256, 64,4096*2,1, 1,4096*2,256, 64,4096*1,1, 1,4096*1,256, 1,512,16, 1,128,8, 1,64,4, 1,32,2,
  0,0};

const unsigned int arpeggio_cont[] = {64,4096,1, 1,4096,256,  64,4096*2,1, 1,4096*2,256, 64,4096*3,1, 1,4096*3,256,  64,4096*4,1, 1,4096*4,256, 64,4096*5,1, 1,4096*5,256, 64,4096*6,1, 1,4096*6,256, 64,4096*8,1, 1,4096*8,256, 1,4096*5,512, 1,12*6,6, 1,4096*6,24, 1,48,2, 1,4096*8,256, 1,6,1, 1,256,2, 1,12,3, 0,0};

const unsigned int arpeggio_and_down0[] = {64,4096,1, 1,4096,256,  64,4096*2,1, 1,4096*2,256, 64,4096*3,1, 1,4096*3,256,  64,4096*4,1, 1,4096*4,256, 64,4096*5,1, 1,4096*5,256, 64,4096*6,1, 1,4096*6,256, 64,4096*8,1, 1,4096*8,256, 1,4096*5,512, 1,12,4, 1,2048,128, 1,4096*4,128, 0,0};

const unsigned int arpeggio_and_down1[] = {64,4096,1, 1,4096,256,  64,4096*2,1, 1,4096*2,256, 64,4096*3,1, 1,4096*3,256,  64,4096*4,1, 1,4096*4,256, 64,4096*5,1, 1,4096*5,256, 64,4096*6,1, 1,4096*6,256, 64,4096*8,1, 1,4096*8,256, 1,4096*5,512, 1,12,2, 1,1024,64, 1,256,8, 1,2048,128, 1,4096*8,128, 1,4096*6,128, 1,4096*5,128, 1,4096*4,128, 1,4096*3,128, 1,4096*2,128, 1,4096,128, 0,0};

const unsigned int arpeggio_and_down[] = {64,4096,1, 1,4096,256,  64,4096*2,1, 1,4096*2,256, 64,4096*3,1, 1,4096*3,256,  64,4096*4,1, 1,4096*4,256, 64,4096*5,1, 1,4096*5,256, 64,4096*6,1, 1,4096*6,256, 64,4096*8,1, 1,4096*8,256, 1,4096*5,512, 1,12,2, 1,1024,64, 1,256,8, 1,2048,128, 1,4096*8,128, 1,4096*6,128, 1,4096*5,128, 1,4096*4,128, 1,4096*3,128, 1,4096*2,128, 1,4096,128, 1,1024,64, 0,0};

const unsigned int arpeggio_and_down3[] = {64,4096,1, 1,4096,256,  64,4096*2,1, 1,4096*2,256, 64,4096*3,1, 1,4096*3,256,  64,4096*4,1, 1,4096*4,256, 64,4096*5,1, 1,4096*5,256, 64,4096*6,1, 1,4096*6,256, 64,4096*8,1, 1,4096*8,256, 1,4096*5,512, 1,12,2, 1,1024,64, 1,256,8, 1,2048,128, 1,4096*8,128, 1,4096*6,128, 1,4096*5,128, 1,4096*4,128, 1,4096*3,128, 1,4096*2,128, 1,4096,128, 1,1024,128, 3,1024*2,128, 1,512,16, 1,256,16, 1,128,8, 0,0};

const unsigned int arpeggio_and_sayling[] = {64,4096,1, 1,4096,256,  64,4096*2,1, 1,4096*2,256, 64,4096*3,1, 1,4096*3,256,  64,4096*4,1, 1,4096*4,256, 64,4096*5,1, 1,4096*5,256, 64,4096*6,1, 1,4096*6,256, 64,4096*8,1, 1,4096*8,256, 1,5*4096,512, 1,12,1 , 1,6*4096,1024, 6,5*6*4096,1024, 1,5*4096,1024, 1,4*4096,1024, 1,3*4096,1024, 1,2*4096,1024, 1,1024,128, 1,128,4, 1,64,4, 1,32,2, 0,0};

// const unsigned int halfway[] = {1,2,1, 1,4,1, 1,8,1, 1,16,1, 1,32,1, 1,64,1, 1,128,1, 1,256,1, 1,512,1, 1,1024,1, 1,2048,1, 1,4096,1, 1,8192,1, 1,16384,1, 0,0};

// const unsigned int back_to_ground[] = {3,128*2,8, 1,128,4, 1,64,3, 0,0};
const unsigned int stepping_down[] = {1,4096*8,512+256, 1,4096*7,512,  1,4096*6,512,  1,4096*5,512,  1,4096*4,512,  1,4096*3,512,  1,4096*2,512,  1,4096,512, 0,0};

const unsigned int back_to_ground[] = {1,2048,32, 3,1024*2,32, 1,1024,32, 1,512,32, 2,512*3,32, 1,256,16, 1,128,8, 1,64,4, 0,0};

// see: pentatonic_minor[] = {1,1, 5,6, 3,4, 2,3, 5*2,6*3, 0,0};
const unsigned int pentatonic_rise[] =
  {1,4096,256, 5,6*4096,256, 3,4*4096,256, 2,3*4096,256, 5*2,6*3*4096,256, 1,2*4096,256, 0,0};

const unsigned int pentatonic_desc[] =
  {1,2*4096,256, 5*2,6*3*4096,256, 2,3*4096,256, 3,4*4096,256, 5,6*4096,256, 1,4096,256, 0,0};

const unsigned int penta_3rd_down_5[] =
  {1,2*4096,256, 2,3*4096,256, 5*2,6*3*4096,256, 3,4*4096,256, 2,3*4096,256, 5,6*4096,256, 3,4*4096,256, 1,4096,256,
   3,2*4096,256, 1,4096,512, 0,0};

const unsigned int penta_3rd_rise[] =
  {1,4096,256, 3,4*4096,256, 5,6*4096,256, 2,3*4096,256, 3,4*4096,256, 5*2,6*3*4096,256, 2,3*4096,256,
   1,2*4096,512, 0,0};

// was: rising_pent_theme
const unsigned int rising_pent_them[] =
  {1,4096,256, 3,4*4096,256, 5,6*4096,256, 2,3*4096,256, 3,4*4096,1024, 1,4,1 ,1,1024,32, 1,32,1, 1,1024,32, 1,32,1, 1,1024,64, 0,0};

const unsigned int pent_top_wave_0[] =
  {2,3*4096,512, 1,8,1, 5*2,6*3*4096,256, 1,8,1, 1,2*4096,256, 1,8,1, 5*2,6*3*4096,256, 1,8,1, 1,2*4096,256, 1,8,1, 2,3*4096,512, 0,0};

const unsigned int pent_top_wave[] =
  {2,3*4096,512, 5*2,6*3*4096,256, 1,2*4096,256, 5*2,6*3*4096,256, 2,3*4096,256, 3,4*4096,256, 4,3*4096,256, 0,0};

const unsigned int pent_patternA[] =
  {1,4096,256, 5,6*4096,256, 1,4096,256, 3,4*4096,256, 1,4096,256, 2,3*4096,256, 1,4096,256, 5*2,6*3*4096,256, 1,4096,256,
   1,2*4096,256, 1,4096,256, 1,2*4096,512, 0,0};

const unsigned int pent_patternB[] =
  {1,2*4096,256, 5*2,6*3*4096,256, 1,2*4096,256, 2,3*4096,256, 1,2*4096,256, 3,4*4096,256, 1,2*4096,256, 5,6*4096,256, 1,2*4096,256,
   1,4096,256, 1,2*4096,256, 5,6*4096,256, 1,2*4096,256, 3,4*4096,256, 1,2*4096,256, 2,3*4096,256, 1,2*4096,256, 5*2,6*3*4096,256,
   1,2*4096,256, 1,4096,256, 0,0};

// PENTAtonic see:  europ_PENTAtonic[] = {1,1, 8,9, 4,5, 2,3, 3,5, 0,0};
const unsigned int PENTAtonic_rise[] =	// european pentatonic
  {1,4096,256, 8,9*4096,256, 4,5*4096,256, 2,3*4096,256, 3,5*4096,256, 1,2*4096,512, 0,0};
const unsigned int PENTAtonic_desc[] =	// european pentatonic
  {1,2*4096,256, 3,5*4096,256, 2,3*4096,256, 4,5*4096,256, 8,9*4096,256, 1,4096,512, 0,0};
const unsigned int PENTA_3rd_down_5[] =
  {1,2*4096,256, 2,3*4096,256, 3,5*4096,256, 4,5*4096,256, 2,3*4096,256, 8,9*4096,256, 4,5*4096,256,
   1,4096,256, 8,9*4096,256, 1,4096,256, 3,2*4096,256, 1,4096,512, 0,0};
const unsigned int PENTA_3rd_rise[] =
  {1,4096,256, 4,5*4096,256, 8,9*4096,256, 2,3*4096,256, 4,5*4096,256, 3,5*4096,256, 2,3*4096,256, 1,2*4096,256,
   3,5*4096,256, 4,5*4096,256, 1,2*4096,512, 0,0};

const unsigned int up_THRD[]={ 1,4096,256, 4,5*4096,256, 8,9*4096,256, 2,3*4096,256, 4,5*4096,256, 1,2*4096,512, 0,0};

const unsigned int up_THRD_dn[]={ 1,4096,256, 8,9*4096,256, 1,4096,256, 4,5*4096,256, 8,9*4096,256,
    2,3*4096,256, 4,5*4096,256, 3,5*4096,256, 2,3*4096,256, 1,2*4096,512, 0,0};

const unsigned int top_RETurn[]={ 1,2*4096,512, 8,2*9*4096,256, 3,5*4096,256, 1,2*4096,512, 2,3*4096,256,
    3,5*4096,256, 4,5*4096,256, 2,3*4096,256, 8,9*4096,256, 4,5*4096,256, 1,4096,256, 8,9*4096,256, 1,4096,256, 0,0};

const unsigned int dwn_THRD[]={1,2*4096,512, 2,3*4096,256, 3,5*4096,256, 8,9*4096,256, 2,3*4096,256, 8,9*4096,256, 4,5*4096,256,
    1,4096,256, 8,9*4096,256, 1,4096,256, 1,4096,256, 0,0};

const unsigned int dwn_THRD_up[]={1,2*4096,512, 4,2*5*4096,256, 3,5*4096,256, 8,2*9*4096,256, 2,3*4096,256, 1,2*4096,512,
			    4,5*4096,256, 3,5*4096,256, 8,9*4096,256, 2,3*4096,256, 1,4096,256, 1,4096,256, 0,0};

const unsigned int simple_theme[] =
  {1,128,8, 1,2*128,8, 1,3*128,8, 1,4*128,8, 5,6*4*128,3*8, 1,12,3,
   3,4*2048,256*3/4, 5,6*2048,256*3/4, 2,3*2048,256*3/4, 1,2048,128,
   1,128,3, 1,64,3, 1,32,4, 0,0};

const unsigned int tingeling4096[] =
  {1,4096,512, 1,4,2, 1,4096,64, 1,16,4, 1,4096,16, 0,0,0};	// magnets on KALIMBA7
const unsigned int ding1024[] =
  {1,1024,192, 0,0,0};			// KALIMBA7, four times faster
const unsigned int kalimbaxyl[] =
  {1,1024,32, 1,16,2, 1,32,8, 1,1024,4, 1,32,2, 0, 0, 0};	// KALIMBA7, very silent jiffle

const unsigned int ting_tick4096[] = {1,4096,1024, 1,2,1, 1,8192,3, 0,0,0};
const unsigned int tigg_ding4096[] = {1,8192,3, 1,2,1, 1,4096,1024, 0,0,0};	// TODO: nice, use it

const unsigned int tumtum[] = {1,2048,2048/16, 7,16,1, 1,2048,2048/16, 0,0,0};
const unsigned int tumtumtum[] = {1,2048,2048/16, 3,16,1, 1,2048,2048/16, 3,16,1, 1,2048,2048/16, 0,0,0};
const unsigned int tumtumtumtum[] = {1,2048,2048/16, 1,16,1, 1,2048,2048/16, 1,16,1,
			       1,2048,2048/16, 1,16,1, 1,2048,2048/16, 0,0,0};

const unsigned int tum8[] = {1,2048,2048/32, 1,32,1, 1,2048,2048/32, 1,32,1, 1,2048,2048/32, 1,32,1, 1,2048,2048/32, 1,32,1,
		       1,2048,2048/32, 1,32,1, 1,2048,2048/32, 1,32,1, 1,2048,2048/32, 1,32,1, 1,2048,2048/32, 0,0,0};

const unsigned int tum8up[] = {1,2048,2048/32, 1,32,1,  1,2048,2048/32, 1,32,1,  1,2048,2048/32, 1,32,1,  1,2048,2048/32, 1,32,1,
			 1,4096,4096/32, 1,32,1,  1,8192,8192/32, 1,32,1,  1,16384,16384/32, 1,32,1,  1,16384,16384/32, 0,0,0};

//const unsigned int tum16[] = {1,2048,2048/64, 1,64,1, 1,2048,2048/64, 1,64,1, 1,2048,2048/64, 1,64,1, 1,2048,2048/64,	1,64,1,
//			1,2048,2048/64, 1,64,1, 1,2048,2048/64, 1,64,1, 1,2048,2048/64, 1,64,1, 1,2048,2048/64, 1,64,1,
//			1,2048,2048/64, 1,64,1, 1,2048,2048/64, 1,64,1, 1,2048,2048/64, 1,64,1, 1,2048,2048/64, 1,64,1,
//			1,2048,2048/64, 1,64,1, 1,2048,2048/64, 1,64,1, 1,2048,2048/64, 1,64,1, 1,2048,2048/64, 0,0,0};
//
//const unsigned int tum15u[] = {1,2048,2048/64, 1,64,1, 1,2048,2048/64, 1,64,1, 1,2048,2048/64, 1,64,1, 1,2048,2048/64,	1,64,1,
//			 1,1024,1024/64, 1,64,1, 1,512,512/64,   1,64,1, 1,2048,2048/64, 1,64,1, 1,2048,2048/64, 1,64,1,
//			 1,2048,2048/64, 1,64,1, 1,2048,2048/64, 1,64,1, 1,2048,2048/64, 1,64,1, 1,2048,2048/64, 1,64,1,
//			 1,2048,2048/64, 1,64,1, 1,4096,4096/64, 1,64,1, 1,8192,8192/64, 0,0,0};

const unsigned int piip2048[] ={1,2048,128, 0,0,0, };		// length 1/16
const unsigned int tanboura[] ={1,2048,1536, 0,0,0, };	// length 3/4

const unsigned int d2048_div6[] ={1,2048,2048/6, 0,0,0, };	// length ~ 1/6 ~

const unsigned int loong[]{1,4096,4080, 0,0,0, };		// length 255/256
const unsigned int looong[]{1,4096,4088, 0,0,0, };		// length 511/512
const unsigned int loooong[]{1,4096,4092, 0,0,0, };		// length 1023/1024

const unsigned int jiffletab[] =
  {1,16,2, 1,256,32, 1,128,8, 1,64,2, 1,32,1, 1,16,1, 1,8,2, 0,0};

const unsigned int jiff_december[] =
  {1,1024,4, 1,64,4, 1,28,16, 1,512,8, 1,1024,128, 0,0};

// try jiff_dec128 with sync=0 to hear the big drum in the cathedral ;)
const unsigned int jiff_dec128[] =
  {1,1024,4, 1,64,4, 1,128,16, 1,512,8, 1,1024,128, 0,0};

const unsigned int jiff_dec_pizzica[] =	// dirty!
  {1,1024,4, 1,64,4, 1,28,16, 1,512,8, 1,1024,128, 1,2048,8, 0,0};

// very old jiffles
const unsigned int jiffletab0[] =
  {2,1024*3,4, 1,1024,64, 1,2048,64, 1,512,4, 1,64,3, 1,32,1, 1,16,2, 0,0};	// nice short jiffy, FROGS
const unsigned int jiffletab01[] = {1,512,8, 1,1024,16, 1,2048,32, 1,1024,16, 0,0};
const unsigned int jiffletab02[] = {1,128,2, 1,256,6, 1,512,10, 1,1024,32, 1,3*128,20, 1,64,8, 0,0};
const unsigned int jiffletab03[] = {1,32,4, 1,64,8, 1,128,16, 1,256,32, 1,512,64, 1,1024,128, 0,0};	// testing octaves
const unsigned int jiffletab04[] =
  {1,2096,4, 1,512,2, 1,128,2, 1,256,2, 1,512,8, 1,1024,32, 1,512,4, 1,256,3, 1,128,2, 1,64,1, 0,0};
const unsigned int jiffletab05[] = {2,1024*3,4, 1,1024,64, 1,2048,64, 1,512,2, 1,64,1, 1,32,1, 1,16,2, 0,0};
const unsigned int jiffletab06[] = {1,32,2, 0,0};	// doubleclick
const unsigned int jiffletab1[]  = {1,1024,64, 1,512,4, 1,128,2, 1,64,1, 1,32,1, 1,16,1, 0,0};

const unsigned int gling128_0[] = {1,128,16, 0,0};
const unsigned int gling128_1[] = {1,256,2, 1,128,16, 0,0};
const unsigned int gling128_2[] = {1,512,4, 1,256,4, 1,128,16, 0,0};
const unsigned int gling128[]   = {1,512,8, 1,256,4, 1,128,16, 0,0};


// major_scale[] = {1,1, 8,9, 4,5, 3,4, 2,3, 3,5, 8,15, 0,0};
const unsigned int major_rise[] =
  {1,4096,256, 1,9*512,256, 1,5*1024,256, 3,4*4096,256, 1,3*2048,256, 3,5*4096,256, 1,15*512,256, 1,2*4096,256*2, 0,0};
//{1,4096,256, 8,9*4096,256, 4,5*4096,256, 3,4*4096,256, 2,3*4096,256, 3,5*4096,256, 8,15*4096,256, 1,2*4096,256*2, 0,0};

const unsigned int major_descend[] =
  {1,4096,256, 1,15*256,256, 3,5*2048,256, 1,3*1024,256, 3,2*4096,256, 1,5*512,256, 1,9*256,256, 1,2048,256, 0,0};

// minor_scale[] = {1,1, 8,9, 5,6, 3,4, 2,3, 5,8, 5,9, 0,0};
const unsigned int minor_rise[] =
  {1,4096,256, 8,9*4096,256, 5,6*4096,256, 3,4*4096,256, 1,3*2048,256, 5,8*4096,256, 5,9*4096,256, 1,2*4096,256*2, 0,0};
//{1,4096,256, 8,9*4096,256, 5,6*4096,256, 3,4*4096,256, 2,3*4096,256, 5,8*4096,256, 5,9*4096,256, 1,2*4096,256*2, 0,0};

const unsigned int minor_descend[] =
  {1,4096,256, 5,9*2048,256, 5,4*4096,256, 1,3*1024,256, 3,2*4096,256, 5,3*4096,256, 1,9*256,256, 1,2048,256, 0,0};

// doric_scale[] = {1,1, 8,9, 5,6, 3,4, 2,3, 3,5, 5,9, 0,0};
const unsigned int doric_rise[] =
  {1,4096,256, 8,9*4096,256, 5,6*4096,256, 3,4*4096,256, 2,3*4096,256, 3,5*4096,256, 5,9*4096,256, 1,2*4096,256*2, 0,0};

const unsigned int doric_descend[] =
  {1,4096,256, 5,9*2048,256, 3,5*2048,256, 2,3*2048,256, 3,4*2048,256, 5,6*2048,256, 8,9*2048,256, 1,2048,256, 0,0};

const unsigned int pentaCHORD_rise[] =
  {1,4096,256, 1,9*512,256, 1,5*1024,256, 3,4*4096,256, 1,3*2048,256*2, 0,0};

const unsigned int pentaCHORD_desc[] =
  {1,3*1024,256, 3,2*4096,256, 1,5*512,256, 1,9*256,256, 1,2048,256*2, 0,0};

const unsigned int pentachord_rise[] =
  {1,4096,256, 1,9*512,256, 5,6*4096,256, 3,4*4096,256, 1,3*2048,256*2, 0,0};

const unsigned int pentachord_descend[] =
  {1,3*1024,256, 3,4*2048,256, 5,6*2048,256, 1,9*256,256, 1,2048,256*2, 0,0};

const unsigned int tetraCHORD_rise[] =
  {1,4096,256, 1,9*512,256, 1,5*1024,256, 3,4*4096,256*2, 0,0};

const unsigned int tetraCHORD_desc[] =
  {3,2*4096,256, 1,5*512,256, 1,9*256,256, 1,2048,256*2, 0,0};	// FIXME:

// low
const unsigned int d1024_128[] = {1,1024,128, 0,0,0};
const unsigned int d512_128[] = {1,512,128, 0,0,0};

// try on doric scale
const unsigned int doDe_i[] = {1,512,16, 1,1024,16, 1,8,1, 1,2084,11, 0,0};	// TODO: test only, remove?

const unsigned int asdfg[] = {1,64,3, 1,128,3, 1,256,3, 1,512,3, 1,4,1, 1,2084,11, 1,3,1, 1,8192,16, 0,0};	// TODO: test only, remove?

const unsigned int mechanical[] = {4,4096,2, 2,4096,4, 1,4096*8,16, 1,4096*4,8, 1,4096*2,4, 2,4096,4, 1,4096,512, 2,4096,8, 4,4096,4, 8,4096,2, 1,4096*2,6, 0,0};

const unsigned int mech2[] = {4,4096,1, 2,4096,3, 1,4096*8,8, 1,4096*4,4, 1,4096*2,2, 2,4096,3, /**/1,4096,127/**/, 1,4096*4,6, 1,4096*3,3, 8,4096,2, 1,4096*2,6, 0,0};

const unsigned int mech255[] = {4,4096,1, 2,4096,3, 1,4096*8,8, 1,4096*4,4, 1,4096*2,2, 2,4096,3, /**/1,4096,255/**/, 1,4096*4,6, 1,4096*3,3, 8,4096,2, 1,4096*2,6, 0,0};

const unsigned int mech511[] = {4,4096,1, 2,4096,3, 1,4096*8,8, 1,4096*4,4, 1,4096*2,2, 2,4096,3, /**/1,4096,511/**/, 1,4096*4,6, 1,4096*3,3, 8,4096,2, 4,4096,4, 0,0};

const unsigned int mech1023[] = {4,4096,1, 2,4096,3, 1,4096*8,8, 1,4096*4,4, 1,4096*2,2, 2,4096,3, /**/1,4096,1023/**/, 1,4096*4,6, 1,4096*3,3, 8,4096,2, 4,4096,4, 0,0};

// TODO: TEST: and fix  with_pauses[]
const unsigned int with_pauses[] = {1,1024,3, 1,2048,31, 1,4,1, 1,4096,63, 1,2018,15, 1,4,1, 1,4096,511, 1,8,1, 1,4096,11, 0,0};  // TODO: TEST

// made up for commit # 1500 ;)
const unsigned int jiff_1500[] = {/*==mech2*/ 4,4096,1, 2,4096,3, 1,4096*8,8, 1,4096*4,4, 1,4096*2,2, 2,4096,3, 1,4096*4,6, 1,4096*3,3, 8,4096,2, 1,4096*2,6, /*new:*/ 1,2*4096,15, 1,4096,63, 1,2048,15,  1,32,1, 2,3*2048,15, 1,32,1,  1,4096,15, 1,32,1, 1,2*4096,15, 1,32,1, 8,9*2*4096,15, 1,32,1, 4,5*2*4096,15, 1,32,1, 3,4*2*4096,15, 1,32,1, 2,3*2*4096,63, 0,0};

const unsigned int jiff_1500_2[] = {/*mech255*/ 4,4096,1, 2,4096,3, 1,4096*8,8, 1,4096*4,4, 1,4096*2,2, 2,4096,3,
			      /**/1,4096,255/**/, 1,4096*4,6, 1,4096*3,3, 8,4096,2, 1,4096*2,5,
			      1,8,1,
			      1,1024,31, 1,2*4096,1024*3/2,
			      1,64,1, 3,5*4096,511,
			      1,64,1, 2,3*4096,511,
			      1,64,1, 3,4*4096,511,
			      1,64,1, 8,9*4096,511,
			      1,64,1, 1,4096,383, 1,2*4096,24,
			      0,0,};

const unsigned int jiff_1500_3[] = {1,4096,3, 1,4,1,
			      4,4096,4,
			      2,3*4096,1536,
			      4,4096,8,
			      8,9*4096,1024,
			      4,4096,8,
			      4,5*4096,1024,
			      4,4096,8,
			      2,4096,64,
			      4,4096,12,
			      0,0,};


// some temporary TEST<n> jiffles	// TODO: try, fix, RENAME: or REMOVE:
const unsigned int jiff_TEST[] = {
			    1,1024,64,
			    1,64,1,
			    1,1024,32,
			    1,64,1,
			    1,1024,16,

			    1,64,1,
			    1,1024,8,
			    1,64,1,
			    1,1024,8,
			    1,64,1,
			    1,1024,8,
			    1,64,1,
			    1,1024,8,

			    1,64,1,
			    1,1024,8,
			    1,64,1,
			    1,1024,8,
			    1,64,1,
			    1,1024,8,
			    1,64,1,
			    1,1024,8,

			    0,0,
};

const unsigned int jiff_TEST2[] = {
			     1,4096,256,

			     1,128,1,
			     1,4096,16,
			     1,128,1,
			     1,4096,16,
			     1,128,1,
			     1,4096,16,
			     1,128,1,
			     1,4096,16,
			     1,128,1,
			     1,4096,16,
			     1,128,1,
			     1,4096,16,
			     1,128,1,
			     1,4096,16,
			     1,128,1,
			     1,4096,16,

			     1,4,1,

			     1,4096,16,
			     1,64,1,
			     1,4096,16,
			     1,64,1,
			     1,4096,16,
			     1,64,1,
			     1,4096,16,
			     1,32,3,

			     0,0,
};


const unsigned int jiff_TEST3[] = {
			     1,4096,32,
			     7*32,4096,1,
			     1,4096,32,
			     7*32,4096,1,

			     1,4096,32,
			     7*32,4096,1,
			     1,4096,32,
			     7*32,4096,1,

			     1,4096,32,
			     7*32,4096,1,
			     1,4096,32,
			     7*32,4096,1,

			     1,4096,32,
			     7*32,4096,1,
			     1,4096,32,
			     7*32,4096,1,

			     1,4096,32,
			     7*32,4096,1,
			     1,4096,32,
			     7*32,4096,1,

			     1,4096,32,
			     7*32,4096,1,
			     1,4096,32,
			     7*32,4096,1,

			     1,4096,32,
			     7*32,4096,1,
			     1,4096,32,
			     7*32,4096,1,

			     1,4096,32,
			     7*32,4096,1,
			     1,4096,32,
			     7*32,4096,1,

			     0,0,
};

const unsigned int wait_TEST[] = {
			    1,4096,512,
			    1,8,0,
			    1,4096,512,
			    1,8,0,
			    1,4096,128,
			    1,8,0,

			    0,0,
};

const unsigned int wait_TEST2[] = {
			    1,4096,512,
			    1,8,0,
			    1,4096,512,

			    1,4,0,

			    1,4096,8,
			    4096-8,4096,0,
			    1,4096,8,
			    4096-8,4096,0,
			    1,4096,8,
			    4096-8,4096,0,
			    1,4096,8,
			    4096-8,4096,0,
			    1,4096,8,
			    4096-8,4096,0,
			    1,4096,8,
			    4096-8,4096,0,
			    1,4096,8,
			    4096-8,4096,0,
			    1,4096,8,
			    4096-8,4096,0,
			    1,4096,8,
			    4096-8,4096,0,
			    1,4096,8,
			    4096-8,4096,0,
			    1,4096,8,
			    4096-8,4096,0,
			    1,4096,8,
			    4096-8,4096,0,
			    1,4096,8,
			    4096-8,4096,0,
			    1,4096,8,
			    4096-8,4096,0,
			    1,4096,8,
			    4096-8,4096,0,
			    1,4096,8,
			    4096-8,4096,0,

			    0,0,
};

#endif	// ! RAM_IS_SCARE
#define JIFFLES_h
#endif

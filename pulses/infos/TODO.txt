iCode trower

keywords

no dest action flags in jiffle player needed?



// DADA TODO:  #error "sorry this module is temporary switched off"
switched off all older menu examples to decide about menu api changes

softboard  should be done soon



analogReadResolution(12);

~/Arduino/hardware/arduino/sam/variants/arduino_due_x/

~/Arduino/hardware/arduino/avr/variants/leonardo/
__AVR_ATmega32U4__

test float output on PC.


IMAGES of used dev boards

PIN STICKERS of used dev boards


show pp configuration

re organize pp configuration (files), do not forget NO_GPIO_PINS

remove stress indicators, UI?

USE_GPI0_SWITCH	low active input switch || boot button ;)
		i.e. restart pattern in musicBox

free 'i' for input (like double klick ;)

menu: preambles for en-jiffle, en_info, ...
	    and for en_xxx_trower

mnemonics for gpio usage like
	  sw0
	  IO<nn>
	  I<nn>
	  O<nn>
	  Touch
	  CLICK
	  DAC1
	  DAC2
	  ... etc

additional instant stress release

tuning groups octaves for ending, base_pulse, etc

stereo DACs

SPIFFS https://randomnerdtutorials.com/install-esp32-filesystem-uploader-arduino-ide/

fix jiffle editor in :M

stress configuration

extend to 4 voice groups

bereichsregister

fix sync pause display

array2name(SCALES, selected_in(SCALES))		array2selected_name() ?

MENU,out_scanf(....);

show selected icode in show basic parameters

'::Ht' to switch menu just for a line

PR 140 broken

maximal times run time configurable

BT detection when idle?, muBo start?

BUG often plays 2 subcycles

TODO: REMOVE: multiplier, divisor	################################################################

power save mode for OLED deep_sleep()

FIXME: debug power off noise

FIXME:
    //# harmonie
    //# harmonies

separe BATTERY_LEVEL_CONTROL_PIN and signal LED

SWITCH 1-4

gather configuration variables in the code	// TODO: do more

// TODO: maybe clone whole base_pulse ???

ununlaute on OLED äöüÄÖÜ

menu stack

PRENAME (etc) nvs UI

// TODO: void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable);

MPU-6050

introduce SIGNAL leds, use them i.e. MORSE_OUTPUT_PIN

change PERIPHERAL_POWER_SWITCH_PIN as GPIO12 is active during boot process...

BATTERY_LEVEL_CONTROL_PIN	must be set somewhere appropriate

void delay_pause() {	// FIXME: (i.e. morse input...)

double keywords in Pulses

PULSES.select_from_to(0,bass_pulses);			// TODO: do not start by 0!	pulse[bass_pulses] belongs to both output groups

NVS: is there hardware for peripheral power switch?


wo isch de Störfall?
s hät glaub mehreri ...
die spilled offebar nöd uf allne Instrumänt, so try CHATEAU

remove unused morse code

AG_mode D6M
rename AG_mode AG_receive_mode

TODO morse command names come unformatted on menu: "XYZSEND" should be "XYZ |SEND|"

* ESPNOW
* MPU6050 offsets nvs

* MAC nvs	*not* needed, can read it directly ;)

*NO OLED OUTPUT* when it is in POWER SAVE mode		maybe already done?

check monochrome_display_hardware	   MENU.out_ON_off(monochrome_display_hardware);

FIXME: OLED != DELWORD

T touch softboard

analogRead als input
"analogi" touch wert als input

rename simple_theme animals_voice


ESP_NOW VERBOISITY level

ESP_NOW on USB POWER (only) is flaky	:(

MENU.outln_invalid("text");

do I still need .c_str()

monochrome feedback on motion UI switching

replace delay_pause() morse input...

TODO: monochrome pause time

switch ESP-NOW UI

factor out randomisation

TODO: fix clash between MPU6050 and DS1307
TODO: i2c_scan() should know all used i2c devices, maybe even verify them

TODO: possibility to calibrate touch level during startup

i2cdevlib/Arduino/I2Cdev/I2Cdev.h
#define I2CDEV_IMPLEMENTATION       I2CDEV_BUILTIN_FASTWIRE	// DADA

ESP_NOW  VERBOSITY

stress on soft end

esp_now peer musicians list {MAC, PRENAME, /* hw options */}

ultrasonic distance sensor based on interrupts

unsigned int tigg_ding4096[] = {1,8192,3, 1,2,1, 1,4096,1024, 0,0,0};	// TODO: nice, use it

char* setMACstr(const uint8_t* mac) {	// TODO: mac==NULL case ################

TODO: more work left to make all instruments come up in time ;)
delay(10);	// delay for esp_now, but left to make all instruments come up in time ;)

esp_now TIME SLICES for broadcast response

change monochrome row jiffles

// TODO: parameter including preName	peer_ID_t ################
esp_err_t esp_now_pulses_add_peer(const mac_addr_t *mac_addr) {	// might give feedback

try:
https://github.com/MartyMacGyver/ESP32-Digital-RGB-LED-Drivers/blob/master/examples/arduino-esp32/demo1/demo1.ino

void dumpSysInfo() {
  esp_chip_info_t sysinfo;
  esp_chip_info(&sysinfo);
  Serial.print("Model: ");
  Serial.print((int)sysinfo.model);
  Serial.print("; Features: 0x");
  Serial.print((int)sysinfo.features, HEX);
  Serial.print("; Cores: ");
  Serial.print((int)sysinfo.cores);
  Serial.print("; Revision: r");
  Serial.println((int)sysinfo.revision);
}

pulses_RGB_LED_string.h	 why do i always get 3 identical LEDs ???
  HW PROBLEM?	runs well with 1m 144 LED 5V string :)

what is sysinfo.features ???

float saturation_start_value = 0.2;	// TODO: test&trimm default value #################

TODO: float menu input !!!

ui_conf_t TODO: include selection ???

slowly fade rgb leds after ending

// TODO: stress configuration struct stress_conf_t

see also: ROADMAP.txt

fix menu crash after nvs_clear_all_keys()

nvs show all keys

// catch bugs, if any ;)  TODO: REMOVE:

if(accGyro_invert)	// invert mathematical axis	// TODO: where to invert?

encrypted ESP-NOW

see: infos/internal/2019-08-20_backtrace.txt

HUE OFFSETS foreground/background

fix TOUCH MORSE INTERRUPT, from time to time there are still malfunctions and crashes

run time switching of rgb strings to test noise  "Good old Major" 95

time_slice=ILLEGAL8

why do i still include inputs?	never really used

auto calibrate morse touch input interrupt level

factor out 'L' hierarchy, use in :N

fix LiPo OLED type boards

warn if accGyr offsets are not set

GYRO_FLOAT_SCALING variable with UI

stop automatic esp_now_add_identity

* / ...
    stress_count = 0;		// configure pulses stress managment
    stress_event_cnt = -3;	// some *heavy* stress event expected after magical_stress_release()...


why does preset UI drop following input?

TODO: use musicBoxConf.primary_count in next version

TODO: fix play_KB_macro()
      avoid use where not appropriate

REMOVE?	stop_on_LOW_H1() stop_on_LOW()

TEST: stack_sync_slices

TODO: shouldn't these change musicBoxConf.pitch?	no, normalised_octave
   random_octave_shift();
   lower_audio_if_too_high(409600*2);			?

'|' pulses vs musicbox *clash*


    check_maybe_do();	  // maybe do it *first*	TODO: RETHINK:


#define SOFT_END_STOPPS_MOTION_UI	should go to musicBoxConf

version should *always* come first or at a constant offset
	uint8_t version=0;
	uint8_t version_reserved0=0;
	uint8_t version_reserved1=0;
	uint8_t version_reserved2=0;

implement "selected_by"	   as bitmask (0=not set, default) 1=user, 2=nvs, 4=preset, 8=automatic, 16=random, fixed?, ...
implement "selectable_by"  0=not selectable, fixed, (with backdoor for local user)
	randomise should be off at start

* / and butler: done

TEST:	change also harmonical_cycle?

RGB_STRING_LED_CNT
// TODO: bool rgb_strings_available	MOVE: to HARDWARE

morse touch autocalibration
configuration int touch_threshold;	HARDWARE?


TODO: 2 versions bar_graph() implemented softboard | Pulses.cpp
void Menu::bar_graph(long value, unsigned int scale, char c, bool newline /*=true*/) {
softboard


show_pulses_pin_usage(gpio_pin_t pin) // TODO: show also basic pins usage like flash memory, uart, i2c, ...

pin configuration for Wire SDA SCL

lightweight MONO instruments

eliminate TIME_UNIT

case 'j':	// en_jiffle_thrower	// OBSOLETE, as select_jiffle_UI() *does* this now

TODO: expand_fractions() add SAVETY net not to crash on divisor zero
      it should *not* be called with illformed fractions, but *SHOULD NOT CRASH* anyway

TODO: '+' and '-' and numeric input

TODO: selected_do_detune_periods(cents)		REPLACE: by a version working on pitch and retune
no,   REPLACE: by a version working with detuning by PULSES.tuning
      TUNED should *NOT* toggle sweeping!

TODO: add motion UI tuning interface	(partly done)

tune_chromatic(n)

consistensy of metric_mnemonic_str and menu input

butler and tuning to a new scale

bool metric_alternative_tuning	vs  bool some_metric_tunings_only

learn morse code for + and - ;)

bool metric_alternative_tuning = true;	// TODO: active only for TESTING...

the whole tuning-to-the-right-octave-implementation is nonsense...
  delayed fix until i will test time as double

// TODO:  should we keep pitch_was in set_metric_pitch()?

  DEBUG_ESP_NOW in esp_err_info() is messy, deactivated...


esp_now_add_identity() should not be active normally


TODO: musicBox_runtime_data_t block?
pulse_time_t musicBox_start_time;
pulse_time_t musicBox_hard_end_time;


mixed int-double fractions
      functions on them...

  typedef struct D_fraction_t {	// consider a *signed* implementation?
    unsigned int multiplier=1;
    unsigned int divisor=1;
    double value=1.0;
    uint16_t flags=0;
  } D_fraction_t;

  /*
    compare_fractions(D_fraction_t*, D_fraction_t*);
    test_fraction(D_fraction_t*);

    set_fraction(D_fraction_t*, uint, uint);
    set_fraction(D_fraction_t*, double);

    reduce_fraction(D_fraction_t*);
    add, sub, mul, inverse
  */

{
  Harmonical::D_fraction_t D;
  MENU.outln(D.multiplier);
}


double times
       *computed and stored* as floating point, but
       *used* as int64_t
       probably without rounding (?)

       use ESP 64bit timer to get time?
	 * esp_timer_get_time();
	 * hw timer (can start/stop)


       try to mirror oldstyle time/overflow to uint64_t
was:			via:			to: union with uint64_t
typedef struct {	  typedef struct {
  unsigned long time;	    unsigned long overflow;
  unsigned int overflow;    unsigned long time;
} pulse_time_t;		  } pulse_time_t;


check_maybe_do();	  // maybe do it *first*	TODO: RETHINK:

peer ID mac_addr  vs  global my_MAC[]

morse touch pin output is off road

//#define TEMPORARY_TIME64_TEST	// TODO:  REMOVE:

MENU.outln(F("todo: maybe give subcycle infos?"));	// TODO:

return (pulse_time_t) 999999999.0;	// INVALID_time() TODO: select value

+#if defined HEAVYDEBUG	// DADA

#undef MAX_SUBCYCLE_SECONDS		// DADA
#define MAX_SUBCYCLE_SECONDS	2*3600	// DADA
TODO: MAX_SUBCYCLE_SECONDS is broken

CRASH:
#define PULSES_USE_DOUBLE_TIMES
#define USE_ESP_NOW

working well for a while, then:
MusicBox is playing	ID not sent
---------  * * *  *                 '  S(14)	0.727778    131/180	w=1	now=7' 44"
---------** * *  *   *      *       '  S(17)	0.729630    197/270	w=1	now=7' 45"
---------* * *  *   *               '  S(16)	0.731481     79/108	w=1	now=7' 46"
--------- * *  *   *  *   *  *   *  '  S(16)	0.733333     11/15	w=2	now=7' 47"
---------* *  *   *      *          '  S(17)	0.735185    397/540	w=0	now=7' 48"
--------- *  *   *      *           '  S(15)	0.737037    199/270	w=1	now=7' 49"
---------* **  **      *            '  S(15)	0.738889    133/180	w=0	now=7' 51"
---------**  **     **     *      * '  S(17)	0.740741     20/27	w=0	now=7' 52"
---------  **     **                '  S(15)	0.742593    401/540	w=0	now=7' 53"
---------**    ***    *             '  S(15)	0.744444     67/90	w=1	now=7' 54"
---------  ****                     '  S(13)	0.746296    403/540	w=0	now=7' 55"
---------**                         '  S(8)	0.748148    101/135	w=1	now=7' 56"
Guru Meditation Error: Core  1 panic'ed (InstrFetchProhibited). Exception was unhandled.
Guru Meditation Error: Core  1 panic'ed (Interrupt wdt timeout on CPU1)

TODO: try to reproduce the crash!

TODO: incorporate time64bit.h

TODO: fix OLED LiPo

TODO: goto light sleep when done (after a while)


system_menu()
 'SD'		deep sleep now
 'SL'		light sleep now
 'R'		reboot
 'U'		go into user mode
 or move them all below 'E<x>'

show_metric_cents_list();	// TODO: move to Tuning hierarchy

void sweep_click_0(int pulse) {	// can be called from a sweeping pulse	// TODO: REMOVE:

TODO: reformat OLED display layout	IMPLEMENTING...

TODO: menu 'M' mute hierarchy


entune_basic_musicbox_pulses()	refactor


accgyro_preset	accgyro_preset_number vs accgyro_preset_mode

accgyro_modulus

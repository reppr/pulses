iCode trower

keywords

no dest action flags in jiffle player needed?



// DADA TODO:  #error "sorry this module is temporary switched off"
switched off all older menu examples to decide about menu api changes

softboard  should be done soon



analogReadResolution(12);

~/Arduino/hardware/arduino/sam/variants/arduino_due_x/

~/Arduino/hardware/arduino/avr/variants/leonardo/
__AVR_ATmega32U4__

test float output on PC.


IMAGES of used dev boards

PIN STICKERS of used dev boards


show pp configuration

re organize pp configuration (files), do not forget NO_GPIO_PINS

remove stress indicators, UI?

USE_GPI0_SWITCH	low active input switch || boot button ;)
		i.e. restart pattern in musicBox

free 'i' for input (like double klick ;)

menu: preambles for en-jiffle, en_info, ...
	    and for en_xxx_trower

mnemonics for gpio usage like
	  sw0
	  IO<nn>
	  I<nn>
	  O<nn>
	  Touch
	  CLICK
	  DAC1
	  DAC2
	  ... etc

additional instant stress release

tuning groups octaves for ending, base_pulse, etc

stereo DACs

SPIFFS https://randomnerdtutorials.com/install-esp32-filesystem-uploader-arduino-ide/

fix jiffle editor in :M

stress configuration

extend to 4 voice groups

bereichsregister

fix sync pause display

array2name(SCALES, selected_in(SCALES))		array2selected_name() ?

MENU,out_scanf(....);

show selected icode in show basic parameters

'::Ht' to switch menu just for a line

PR 140 broken

maximal times run time configurable

BT detection when idle?, muBo start?

BUG often plays 2 subcycles

TODO: REMOVE: multiplier, divisor	################################################################

power save mode for OLED deep_sleep()

FIXME: debug power off noise

FIXME:
    //# harmonie
    //# harmonies

separe BATTERY_LEVEL_CONTROL_PIN and signal LED

SWITCH 1-4

gather configuration variables in the code	// TODO: do more

// TODO: maybe clone whole base_pulse ???

ununlaute on OLED äöüÄÖÜ

menu stack

PRENAME (etc) nvs UI

// TODO: void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable);

MPU-6050

introduce SIGNAL leds, use them i.e. MORSE_OUTPUT_PIN

change PERIPHERAL_POWER_SWITCH_PIN as GPIO12 is active during boot process...

BATTERY_LEVEL_CONTROL_PIN	must be set somewhere appropriate

void delay_pause() {	// FIXME: (i.e. morse input...)

double keywords in Pulses

PULSES.select_from_to(0,bass_pulses);			// TODO: do not start by 0!	pulse[bass_pulses] belongs to both output groups

NVS: is there hardware for peripheral power switch?


wo isch de Störfall?
s hät glaub mehreri ...
die spilled offebar nöd uf allne Instrumänt, so try CHATEAU

remove unused morse code

AG_mode D6M
rename AG_mode AG_receive_mode

TODO morse command names come unformatted on menu: "XYZSEND" should be "XYZ |SEND|"

* ESPNOW
* MPU6050 offsets nvs

* MAC nvs	*not* needed, can read it directly ;)

*NO OLED OUTPUT* when it is in POWER SAVE mode		maybe already done?

check has_display_hardware	   MENU.out_ON_off(has_display_hardware);

FIXME: OLED != DELWORD

T touch softboard

analogRead als input
"analogi" touch wert als input

rename simple_theme animals_voice


ESP_NOW VERBOISITY level

ESP_NOW on USB POWER (only) is flaky	:(

MENU.outln_invalid("text");

do I still need .c_str()

monochrome feedback on motion UI switching

replace delay_pause() morse input...

TODO: monochrome pause time

switch ESP-NOW UI

factor out randomisation

TODO: fix clash between MPU6050 and DS1307
TODO: i2c_scan() should know all used i2c devices, maybe even verify them

TODO: possibility to calibrate touch level during startup

i2cdevlib/Arduino/I2Cdev/I2Cdev.h
#define I2CDEV_IMPLEMENTATION       I2CDEV_BUILTIN_FASTWIRE	// DADA

ESP_NOW  VERBOSITY

stress on soft end

esp_now peer musicians list {MAC, PRENAME, /* hw options */}

ultrasonic distance sensor based on interrupts

unsigned int tigg_ding4096[] = {1,8192,3, 1,2,1, 1,4096,1024, 0,0,0};	// TODO: nice, use it

char* setMACstr(const uint8_t* mac) {	// TODO: mac==NULL case ################

TODO: more work left to make all instruments come up in time ;)
delay(10);	// delay for esp_now, but left to make all instruments come up in time ;)

esp_now TIME SLICES for broadcast response

change monochrome row jiffles


try:
https://github.com/MartyMacGyver/ESP32-Digital-RGB-LED-Drivers/blob/master/examples/arduino-esp32/demo1/demo1.ino

void dumpSysInfo() {
  esp_chip_info_t sysinfo;
  esp_chip_info(&sysinfo);
  Serial.print("Model: ");
  Serial.print((int)sysinfo.model);
  Serial.print("; Features: 0x");
  Serial.print((int)sysinfo.features, HEX);
  Serial.print("; Cores: ");
  Serial.print((int)sysinfo.cores);
  Serial.print("; Revision: r");
  Serial.println((int)sysinfo.revision);
}

pulses_RGB_LED_string.h	 why do i always get 3 identical LEDs ???
  HW PROBLEM?	runs well with 1m 144 LED 5V string :)

what is sysinfo.features ???

float saturation_start_value = 0.2;	// TODO: test&trimm default value #################

TODO: float menu input !!!

ui_conf_t TODO: include selection ???

slowly fade rgb leds after ending

// TODO: stress configuration struct stress_conf_t

see also: ROADMAP.txt

nvs show all keys

// catch bugs, if any ;)  TODO: REMOVE:

if(accGyro_invert)	// invert mathematical axis	// TODO: where to invert?

encrypted ESP-NOW

see: infos/internal/2019-08-20_backtrace.txt

HUE OFFSETS foreground/background

fix TOUCH MORSE INTERRUPT, from time to time there are still malfunctions and crashes

run time switching of rgb strings to test noise  "Good old Major" 95

time_slice=ILLEGAL8

why do i still include inputs?	never really used

auto calibrate morse touch input interrupt level

factor out 'L' hierarchy, use in :N

fix LiPo OLED type boards

warn if accGyr offsets are not set

GYRO_FLOAT_SCALING variable with UI

stop automatic esp_now_add_identity

* / ...
    stress_count = 0;		// configure pulses stress managment
    stress_event_cnt = -3;	// some *heavy* stress event expected after magical_stress_release()...


why does preset UI drop following input?

TODO: fix play_KB_macro()
      avoid use where not appropriate

REMOVE?	stop_on_LOW_H1() stop_on_LOW()

TEST: stack_sync_slices

TODO: shouldn't these change musicBoxConf.pitch?	no, normalised_octave
   random_octave_shift();
   lower_audio_if_too_high(409600*2);			?

'|' pulses vs musicbox *clash*


    check_maybe_do();	  // maybe do it *first*	TODO: RETHINK:


#define SOFT_END_STOPPS_MOTION_UI	should go to musicBoxConf

version should *always* come first or at a constant offset
	uint8_t version=0;
	uint8_t version_reserved0=0;
	uint8_t version_reserved1=0;
	uint8_t version_reserved2=0;

implement "selected_by"	   as bitmask (0=not set, default) 1=user, 2=nvs, 4=preset, 8=automatic, 16=random, fixed?, ...
implement "selectable_by"  0=not selectable, fixed, (with backdoor for local user)
	randomise should be off at start

* / and butler: done

TEST:	change also harmonical_cycle?

RGB_STRING_LED_CNT
// TODO: bool rgb_strings_available	MOVE: to HARDWARE

morse touch autocalibration
configuration int touch_threshold;	HARDWARE?


TODO: 2 versions bar_graph() implemented softboard | Pulses.cpp
void Menu::bar_graph(long value, unsigned int scale, char c, bool newline /*=true*/) {
softboard


pin configuration for Wire SDA SCL

lightweight MONO instruments

eliminate TIME_UNIT

case 'j':	// en_jiffle_thrower	// OBSOLETE, as select_jiffle_UI() *does* this now

TODO: expand_fractions() add SAVETY net not to crash on divisor zero
      it should *not* be called with illformed fractions, but *SHOULD NOT CRASH* anyway

TODO: '+' and '-' and numeric input

TODO: selected_do_detune_periods(cents)		REPLACE: by a version working on pitch and retune
no,   REPLACE: by a version working with detuning by PULSES.tuning
      TUNED should *NOT* toggle sweeping!

TODO: add motion UI tuning interface	(partly done)

tune_chromatic(n)

consistensy of metric_mnemonic_str and menu input

butler and tuning to a new scale

bool metric_alternative_tuning	vs  bool some_metric_tunings_only

learn morse code for + and - ;)

bool metric_alternative_tuning = true;	// TODO: active only for TESTING...

the whole tuning-to-the-right-octave-implementation is nonsense...
  delayed fix until i will test time as double

// TODO:  should we keep pitch_was in set_metric_pitch()?

  DEBUG_ESP_NOW_b in esp_err_info() is messy, deactivated...


esp_now_add_identity() should not be active normally


TODO: musicBox_runtime_data_t block?
pulse_time_t musicBox_start_time;
pulse_time_t musicBox_hard_end_time;


mixed int-double fractions
      functions on them...

  typedef struct D_fraction_t {	// consider a *signed* implementation?
    unsigned int multiplier=1;
    unsigned int divisor=1;
    double value=1.0;
    uint16_t flags=0;
  } D_fraction_t;

  /*
    compare_fractions(D_fraction_t*, D_fraction_t*);
    test_fraction(D_fraction_t*);

    set_fraction(D_fraction_t*, uint, uint);
    set_fraction(D_fraction_t*, double);

    reduce_fraction(D_fraction_t*);
    add, sub, mul, inverse
  */

{
  Harmonical::D_fraction_t D;
  MENU.outln(D.multiplier);
}


double times
       *computed and stored* as floating point, but
       *used* as int64_t
       probably without rounding (?)

       use ESP 64bit timer to get time?
	 * esp_timer_get_time();
	 * hw timer (can start/stop)


       try to mirror oldstyle time/overflow to uint64_t
was:			via:			to: union with uint64_t
typedef struct {	  typedef struct {
  unsigned long time;	    unsigned long overflow;
  unsigned int overflow;    unsigned long time;
} pulse_time_t;		  } pulse_time_t;


check_maybe_do();	  // maybe do it *first*	TODO: RETHINK:

peer ID mac_addr  vs  global my_MAC[]

morse touch pin output is off road

MENU.outln(F("todo: maybe give subcycle infos?"));	// TODO:

return (pulse_time_t) 999999999.0;	// INVALID_time() TODO: select value

+#if defined HEAVYDEBUG	// DADA

#undef MAX_SUBCYCLE_SECONDS		// DADA
#define MAX_SUBCYCLE_SECONDS	2*3600	// DADA
TODO: MAX_SUBCYCLE_SECONDS is broken

CRASH:
#define PULSES_USE_DOUBLE_TIMES
#define USE_ESP_NOW

working well for a while, then:
MusicBox is playing	ID not sent
---------  * * *  *                 '  S(14)	0.727778    131/180	w=1	now=7' 44"
---------** * *  *   *      *       '  S(17)	0.729630    197/270	w=1	now=7' 45"
---------* * *  *   *               '  S(16)	0.731481     79/108	w=1	now=7' 46"
--------- * *  *   *  *   *  *   *  '  S(16)	0.733333     11/15	w=2	now=7' 47"
---------* *  *   *      *          '  S(17)	0.735185    397/540	w=0	now=7' 48"
--------- *  *   *      *           '  S(15)	0.737037    199/270	w=1	now=7' 49"
---------* **  **      *            '  S(15)	0.738889    133/180	w=0	now=7' 51"
---------**  **     **     *      * '  S(17)	0.740741     20/27	w=0	now=7' 52"
---------  **     **                '  S(15)	0.742593    401/540	w=0	now=7' 53"
---------**    ***    *             '  S(15)	0.744444     67/90	w=1	now=7' 54"
---------  ****                     '  S(13)	0.746296    403/540	w=0	now=7' 55"
---------**                         '  S(8)	0.748148    101/135	w=1	now=7' 56"
Guru Meditation Error: Core  1 panic'ed (InstrFetchProhibited). Exception was unhandled.
Guru Meditation Error: Core  1 panic'ed (Interrupt wdt timeout on CPU1)

TODO: try to reproduce the crash!

TODO: goto light sleep when done (after a while)


system_menu()
 'SD'		deep sleep now
 'SL'		light sleep now
 'R'		reboot
 'U'		go into user mode
 or move them all below 'E<x>'

show_metric_cents_list();	// TODO: move to Tuning hierarchy

void sweep_click_0(int pulse) {	// can be called from a sweeping pulse	// TODO: REMOVE:

TODO: reformat OLED display layout	IMPLEMENTING...


entune_basic_musicbox_pulses()	refactor


accgyro_preset	accgyro_preset_number vs accgyro_preset_mode

accgyro_modulus

REMOVE: IMPLEMENT_TUNING
	RENAME: other_time
		other_pulse ???

group of musicbox butler?

tuning mode:
TODO: switch ui menu input mode: chiffres are note position toggle *not* presets
	no automatic end	fixed? brute force
	chiffres are taken as note-positions, toggle
	morse overlong ends tuning mode
	maybe send chiffres from morse immediately?

TODO: show tuning	// display pitch tuning

float hertz = 0.0;	// TODO: maybe

TODO: staff pitch groups L B M H

TODO: MORSE output on LED   (speaker? )
      MORSE output as pulse?


TODO: reserve more pins:
  TRIGGER     34
  MIDI
  TOUCH		[=13], 2(LED?), 27, 32(SD), 33
    TOUCH no OLED	4, 14
    TOUCH no RGB	[=14], (15?)

  UART2		RX 16 (OLED)	TX 17


some experimental jiffles
     TODO: rename or remove


RETHINK: harmonical_base	looks obsolete?

PSRAM tests

esp_now_set_pmk()
esp_err_t esp_now_set_pmk(const uint8_t *pmk)
uint8_t lmk[ESP_NOW_KEY_LEN]
{0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55

#define ESP_NOW_CHANNEL	4		// TODO: UI

//determine_imu_zero_offsets(2000);	// TODO: use and UI

esp now parameters enable, channel ...

esp now feedback verbosity

preName, 16

change some default names like "portable"

void set_my_IDENTITY() ???

possibility to run without esp now and initialise at run time
  measure power usage

case 'I':	// info		// force OLED resdisplay or morse	// TODO: display help

nvs ERROR_ln(F("too much"));	// TODO: DEBUG: i have seen this...


respect   if(! monochrome_power_save)

unused: void show_configuration_as_string() {	// file 1line representation, similar show_configuration_code()

musicBox
char s[] = {'p', 0};		// TODO: how to clear that?	deactivated ;)
u8x8.draw2x2String(0, 0, s);	// TODO: how to clear that?	deactivated ;)

do not forget the monochrome type setup mess...
// DADA	TODO: monochrome_conf_t

monochrome row control
TODO: return row  void monochrome_println_big_or_multiline(int row, char* str);

musicBox case 'ED':		// TODO: huch?

for(int i=0; i < RGB_STRINGS_MAX; i++) {	// TODO: FIXME: do *not* show string 1 on pin 0,
fixed:	#define RGB_STRINGS_MAX		1	// 8 "possible"

TODO: make number of available strings run-time configurable
  see: #define RGB_STRINGS_MAX	1	// 8 "possible"

GPIO14  would be *much* better for touch "analog" input, move RGB_LED_STRIP_DATA_PIN?

softboard show more pin info:
  state on esp32
  board usage: TX RX DAC LED i2c

TODO: test softboard example

show_pulses_all_pins_usage();	// TODO: keep 'P'?	capabilities?	verbosity

TODO: PRESET 97: di tüüfere tön lüüter stelle

musicBox  MENU.out(F("pause\t"));	// TODO: get_pause_time() should not display pause==0

int8_t musicBox_page=ILLEGAL8;	// NOTE: musicBox_page is not used	// TODO: ???

run time: other button0 functionality?

./pulses/extensions/pulses_RGB_LED_string.h 91:#include "FOREIGN/ESP32-Digital-RGB-LED-Drivers/src/esp32_digital_led_lib.h"

musicBox  case 'O': // 'IO' clear OLED	// TODO: OBSOLETE?

// nvs_PRENAME TODO:  esp_err_t nvs_erase_key(nvs_handle_t handle, const char *key);

// TODO: monochrome metric_mnemonic 'IR...'

WiFi.mode(WIFI_STA);			// TODO: BUG: does not returm on PSRAM boards!

fix MC_print()
fix (or remove) next row in big_or_multiline and extended_output

test rgb string (hardware) level shifting

2 more touch inputs

MUSICBOX_TRIGGER_BLOCK_SECONDS should go to musicBoxConf or HARDWARE

UI to stress release

morse.h IS A MESS
play morse output
morse cheat sheets

try USE_BLUETOOTH_SERIAL_MENU
fix bluetooth_enable_pin logic
  use HARDWARE.bluetooth_enable_pin

#define USE_BLUETOOTH_SERIAL_MENU	fix DIL switch and HARDWARE conf logic

RGBstringConf to nvs

morse MACRO_NOW obsolete?

make multicore monochrome switchable
reset monochrome

case 'S':	// 'UUS' scaling sync_shifting()	// TODO: document 'U' UI

TODO: sync_shifting monochrome feedback

update MUSICBOX_TRIGGER_PIN
       USE_MUSICBOX_TRIGGER_PIN
       HARDWARE_conf
       musicBox_trigger_enabled

update battery control


// WiFi.setSleep(false);			// TODO: no idea if/why we would need this, just a test...
do test with 'EFL' and 'EFD'
MENU.outln(F("WiFi.setSleep(false)\t TODO: test"));
WiFi.setSleep(false);

//do_on_other_core(&display_preset_names);	// TODO: had some strange problems with that...

monochrome_print_1line()	// TODO: redundant? see: monochrome_show_line()

'CCC' mode: send all inputs

ACCGYR_PRES_MODE_MUTE_AND_VOLUME,	// TODO: implement

implement menu float input
// 'VV<nnn>' PULSES.volume	// given as 0...255	TODO: float input
if(hz = MENU.numeric_input(0)) {	// TODO: float input
PULSES.tuning = (double) input_value;	// TODO: double input

voices to musicBoxConf

musicBox_pause_seconds to MagicConf

MORSE_conf

TODO: fix peer_ID_list after deleting a peer

calculate instead of numeric input
  bool Menu::get_numeric_input(unsigned long *result) {	// if there's a number, read it	// OBSOLETE? see: get_signed_number
  bool maybe_calculate_input(unsigned long *result);	// check for & calculate positive integer input		// OBSOLETE?:

ESP32 softboard

'C' Calc prime factors are broken...

input_value = MENU.numeric_input(selected_actions);      // TODO: allow mnemonics ################

short primary_count=0;	// TODO: ################ voices vs primary_count ???
short voices=0;		// TODO: not used yet	################		################ voices vs primary_count ???

s/savety/safety/

#define ICODE_INSTEAD_OF_JIFFLES	// TESTING using all jiffles as icodes	TODO: REMOVE: after a while

tag_randomness(icode_user_selected);	// TODO: DEBUG:

pulses:  case 'R':	// scale  was: ratio	// TODO: see musicBox 'R'	make them identical? ################

skip pause from UI and from preset

pitch tuning from preset

skip pause UI
autoskip_pause UI

cycle_monitor_i and '*' '/' tuning?	// currently cycle_monitor runs from within the butler

RETHINK: not_a_preset and name

if(HARDWARE.musicbox_trigger_pin != ILLEGAL8 )	// hmm, what else could wake me up?
  if (esp_sleep_enable_ext0_wakeup((gpio_num_t) HARDWARE.musicbox_trigger_pin, 1))
    ERROR_ln(F("esp_sleep_enable_ext0_wakeup()"));

uint8_t rgb_pin[RGB_STRINGS_MAX]={RGB_LED_STRIP_DATA_PIN};		// %4	TODO: FIX ALIGNEMENT

display.setRotation(1);	// TODO: rotation should go into HARDWARE


implement for ePaper?
  monochrome_preset_names()

void try_monochrome_fix() {	// DADA:  ################	not working appropriate

delay(3000);		// TODO: TEST: maybe ESP now confuses display?

void try_ePaper_fix() {
  //~GxEPD2_BW<GxEPD2_213_B73, GxEPD2_213_B73::HEIGHT>();
  //~GxEPD2_BW();	// destructor ?

MC_printBIG(2*morse_out_buffer_cnt, MORSE_MONOCHROME_ROW, " "); TODO: avoid the 2*col

presets and ePaper
#if defined BOARD_LILYGO_T5	// TODO: adapt MONOCHROME_MOTION_STATE_ROW

#define MONOCHROME_TEXT_BUFFER_SIZE	156	// (7*22 +2)	// TODO: more versatile implementation

uint8_t morse_touch_input_pin=ILLEGAL8;	// TODO: store touch_threshold

ERROR: morse no definition	show received tokens

#define MC_DELAY_MS	10	// delay MC_mux lock release	// TODO: maybe obsolete?

//monochrome_preset_names(short start_at_preset=0)	// DADA TODO: ################################################################
#if defined COMPILE_MORSE_CHEAT_SHEETS && defined HAS_OLED	// not yet for HAS_ePaper

ePaper_infos();	// on display and menu UI

#include "GxEPD_ePaper.h"	// TODO: include early!

//monochrome_preset_names(short start_at_preset=0)
//MC_clear_display();
//MC_clearLine(row); ???
//MC_display_message("user mode active");
//MC_esp_now_peer_list();
//morse_cheat_sheets_UI();
// default font (should always be selected)
// get_cols
// get_rows

monochrome_preset_names(MENU.numeric_input(0));	// TODO: ePaper	//  n==0: continue through the list, or start at n
int search_preset_list(char* s) {

fine tuning font parameters

full sync format and others like pitch etc

(long) names display...

mpu6050	// TODO: jiffle or iCODE ???

pulses_boards.h		LILYGO etc

MC_SEMAPHORE for OLED display too

void ePaper_BIG_or_multiline(int16_t row, char* text) {
  xSemaphoreTake(MC_mux, portMAX_DELAY);	// TODO: could delay application core
}

void morse_do_output() {
    xSemaphoreTake(MC_mux, portMAX_DELAY);	// TODO: could delay application...
}

ePaper_show_program_version() {
	ePaper.print(HARDWARE.battery_level_control_pin);	// TODO: show level
	ePaper.print(HARDWARE.gpio_pins_cnt);	// TODO: show individual pins


HARDWARE
  // uint8_t dac_channel_cnt=0;	// TODO:


extern void MC_esp_now_peer_list();	// TODO: HAS_ePaper


// TODO: monochrome_conf_t
// TODO: void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable);

multicore version of  void display_names(arr_descriptor* DB) {
new do_on_other_core(void (*function_p)(), void* argument_p) version

maybe even with semaphore?
  generic_do_on_other_core(void (*function_p)(void*), void* argument_p, SemaphoreHandle_t* semaphore_p==NULL)

'CCC' refresh peer list

nvs_pulses      MENU.error_ln(F("monochrome type unknown"));	// TODO: ERROR_ln() does not work here???

preset_data	after menu input 666 preset number is bad!
	musicBoxConf.preset	= preset_was;	// TODO: does not work, fix that

TODO: ePaper does not use it s bigger screen for morse cheat sheets yet

delay after showinging error message on display
or/and storing error messages

more MPU feedback on display
'IU' show current MCU values

MENU.print_free_RAM	can crash when display is on


pulses.ino: does this double do_on_other_core() work well?
  case '?':	// help, overrides common menu entry for '?'
    do_on_other_core(&menu_pulses_display);	// TODO: TEST: was: MENU.menu_display();  // menu as common
    do_on_other_core(&all_pulses_info);		// + all_pulses_info();
    break;

#define CPU_IS_MULTICORE

display_accGyro_mode()	show accGyro_is_active ON/off

ePaper.fillRect(x, y - used_font_yAdvance + 4, ePaper.width(), used_font_yAdvance, GxEPD_WHITE);	// TODO test&trimm: -4
uint8_t font_linlen=22;	// TODO: FIXME: ################

last_row
show_cheat_sheet font	&FreeMonoBold12pt7b

https://github.com/espressif/arduino-esp32/tree/master/libraries/ESP32/examples/ChipID/GetChipID
esp_get_free_heap_size();

PULSES.tuning = (double) input_value;	// TODO: (double) input, (double) calculations

multiply_musicBox_periods(2); and pitch, octave?

ePaper and "Busy Timeout!"

esp_err_t status = esp_now_pulses_send(time_sliced_sent_to_mac);	// CRASH! ################
	  possibly brownout?

show_metric_cents_list()

if(midi_available())	// TODO: implement MIDI in reaction

preset setup macros, save in SPIFFS?

#if defined USE_MIDI	// TODO: add runtime switch, and pulses action flag

A_UI() display

MIDI UI switch using pitch bend, running status
MIDI running status

uint8_t midi_does_pitch_bend=false;	// *not used yet*
MIDI fine tune by pitch bend table[12] (or [127]?)

MIDI pins on pico kit?
MIDI pins and ePaper?

MIDI BAUDRATE
MIDI pitch bend range
 // TODO: maybe?
 // #define sendPITCHBEND	256	// send MIDI pitch bend (sendMIDI must be set too)
 // #define noACTION		512	// 'mutes' all actions
 // #define ACTION_MASK_BITS	10	// >>>>>>>> *DO CHANGE* number of flags changes here <<<<<<<
void MIDI_reaction();	// TODO: implement MIDI in reaction


TODO: fix ESP-NOW channel
#define ESP_NOW_CHANNEL	0	// was:4 (DOES NOT WORK ANY MORE)	TODO: UI
//peer_info.channel = 0;	// OK
//peer_info.channel = 1;	// OK
//peer_info.channel = 2;	// ERROR

esp-now SDR tests
uint8_t esp_now_channel=ILLEGAL8;	// *not used yet*		// %4
//ap_config.ap.channel = ESP_NOW_CHANNEL;	// TODO: ????
+//esp_wifi_set_channel(ESP_NOW_CHANNEL);	???


implement: MENU save last input, repeat

A_UI()	   stress managment UI

selected_DACsq_intensity_proportional()
	is only used in very few (test?) cases
	test&fix?

int dac1_intensity;	// maybe use float?
// and how about ledc0, ledc1, ledc2, ledc3 intensities?

move ledc audio configuration to pulses_engine_config.h
#if defined LEDC_INSTEAD_OF_DACs	// use LEDC instead of DAC?	// TODO: shut off LEDC	################
MENU.outln(F("uses LEDC on pin 25 & 26"));	// TODO: read dac/ledc pins from HARDWARE
extern void pulses_ledc_write(unsigned char channel, uint32_t value);	// DOES NOT WORK?
ledc_set_duty(LEDC_HIGH_SPEED_MODE, (ledc_channel_t) 0, ledcVal);	// TODO: remove test code
REMOVE: ledc_audio_pin0  and all related code

all DAC | LEDc etc  should have resolution data in HARDWARE


test GPIO0 button as (slow) MORSE input ;)

TEST ALL INPUT ONLY PINS

softboard: show ESP32 pin configuration

prepare Menu and Softboard for Raspberry pico rp2040

make automatic ESP-NOW sending runtime switchable, default to OFF

from start_musicBox()      return;	// ################	TODO: TEST low battery

// TODO: what about AUTOSTART after deep sleep?
if(musicBox_when_done != &user)	// user() is a flag *NOT to autostart* musicBox
  start_musicBox();

repeated 'E'
    else // 'E' bare
      start_soft_ending(MagicConf.soft_end_days_to_live, MagicConf.soft_end_survive_level);

BUG: sometimes it does not stop after one cycle		see: 183 Santur c#- minor  "BACH"

hardware description for new pin mapping

update pin mapping docu

FIXME: '_' toggle echo

LoRa configuration and nvs

bool LoRa_interpret_codes=true;		// ################ TODO: menu UI

note *all* adc pins
the following GPIOs can act as ADC pins: 0, 2, 4, 12, 13, 14, 15, 25, 26, 27, 32, 33, 34, 35, 36, and 39

deactivate library Inputs

(soft) deactivate ESP-NOW?

ESP32_TIMER_INTERRUPT_VERSION
ARDUINO_BOARD

DEACTIVATE print_free_RAM(), too many crashes!!!	<-- done

LoRa feedback and verbosity

LoRa check for LoRa transmitter...

//#define USE_BLUETOOTH_SERIAL_MENU	// needs new git versions

use bool LoRa_is_functional=false;


/*void dumpSysInfo()*/ {
  esp_chip_info_t sysinfo;
  esp_chip_info(&sysinfo);
  Serial.print("Model: ");
  Serial.print((int)sysinfo.model);
  Serial.print("; Features: 0x");
  Serial.print((int)sysinfo.features, HEX);
  Serial.print("; Cores: ");
  Serial.print((int)sysinfo.cores);
  Serial.print("; Revision: r");
  Serial.println((int)sysinfo.revision);
}

{
  esp_chip_info_t sysinfo;
  MENU.out(F("cores "));
  MENU.outln((int) sysinfo.cores);
}


LoRa needs ESP32TimerInterrupt.h


/home/buster/Arduino/pulses/pulses.ino:340:14: warning: ISO C++ forbids converting a string constant to 'char*' [-Wwrite-strings]
       return ">*< ALL KNOWN >*<";  // for esp_now

if(*mac_addr == NULL) { // esp_now_pulses.h:261:19: warning: NULL used in arithmetic [-Wpointer-arith]

LoRa duty cycle
repetition number

//  LoRa_fallback_timer.stopTimer();		// FIXME: crash
//  LoRa_fallback_timer.disableTimer();		// FIXME: crash
//  LoRa_fallback_timer.detachInterrupt();	// FIXME: crash

do use bool LoRa_interpret_codes

//	  case 'V': case 'v':	// 'V' 'V<nn>' analogRead(pin);		// TODO: implement analogRead
//#define  LORA_CODE_READ_VOLTAGE	'V'	// read BATTERY_LEVEL_CONTROL_PIN or another pin	TODO: implement

//  case 'Q': case 'q':		// TODO: LoRa invertIQ

LoRa_exploring.h
	// ****************************************************************
	#if defined PULSES_SYSTEM	// this code is only compiled for pulses
	  #if defined BATTERY_LEVEL_CONTROL_PIN
	    #include "battery_control.h"
	  #endif
	#endif // PULSES_SYSTEM

LORA	nvs
	// configure_LORA_from_nvs();
	menu case comments
	LORA_DEFAULT_VOLTAGE_PIN


BATTERY	nvs
  // configure_BATTERY_from_nvs();

USE_BATTERY_CONTROL instead of BATTERY_LEVEL_CONTROL_PIN	ok, done
check for valid HARDWARE.battery_level_control_pin		ok, done  TODO: needs testing
*do* use BATTERY data						ok, done
BATTERY.static_13V65_level	// TODO?: NOT IMPLEMENTED, not used
battery_control.h does not need BATTERY_LEVEL_CONTROL_PIN any more?


if((PULSES.pulses[pulse].counter % 13) == 0) {	// keep an eye on the battery	// TODO: seems to often


int pulse_2_rgb_pixel(int pulse)
void set_pulse_LED_pixel_from_counter(int pulse)
*SIGNED* offsets?	int8_t (or even int16_t)	uint8_t rgb_pattern0[RGB_STRINGS_MAX]={0};

e-Paper (| OLED) rotation, UI

replace MENU.drop_input_token()

LoRa and extended output?

change boot sequence

set_metric_pitch(n, bool output=true);

wake up by serial?

/*
  maybe_restore_from_RTCmem();
  *either* from
  pulses.ino setup()	would be better, but does not work?
  *or* from
  start_musicBox();	must be blocked if appropriate
*/
//  maybe_restore_from_RTCmem();		// only after deep sleep, else noop


//	// TODO: maybe use somewhere?
//	void dumpSysInfo() {
//	  esp_chip_info_t sysinfo;
//	  esp_chip_info(&sysinfo);
//	  MENU.out("Model: ");
//	  MENU.out((int)sysinfo.model);
//	  MENU.out("; Features: 0x");
//	  MENU.out((int)sysinfo.features, HEX);
//	  MENU.out("; Cores: ");
//	  MENU.out((int)sysinfo.cores);
//	  MENU.out("; Revision: r");
//	  MENU.outln((int)sysinfo.revision);
//	}

TODO: test RGB string

TODO: delay(100); in esp_now_call_participants();

MAGICAL_TOILET_HACKS mystery
WTF, check that!
#ifdef HARMONICAL_MUSIC_BOX
  #if defined MUSICBOX_TRIGGER_PIN	// trigger pin?
    #if ! defined MAGICAL_TOILET_HACKS	// some quick dirty hacks, *no* interrupt
//    magic_trigger_ON();
    #else
      if(HARDWARE.musicbox_trigger_pin != ILLEGAL8)
	pinMode(HARDWARE.musicbox_trigger_pin, INPUT);
    #endif
  #endif
#endif

FIXME: soft_end i.e. preset 50

bool RGB is on *peripheral* power

FIXME: low battery does *not* stop playing :(		fixed, was hardware bug

nvs: 'BK' kill, delete 'B' entry?
     see all keys?

FIXME: esp-now peer channel		// TODO: ESP_NOW_CHANNEL

use musicBoxConf.cycle_slices

i2c address collision RTC and MPU6050
    pulses_sanity_checks et al


do use RTC module in TRIGGERED_MUSICBOX2
#define RTC_I2C_ADDRESS 0x68
//#if defined PULSES_SYSTEM	// see: HARDWARE.RTC_addr (unsused)
HARDWARE.RTC_addr and cc macro
HARDWARE.RTC_type = RTC_type_DS1307;	// FIXME: RTC_type_DS3231 ???

// show_metric_cents_list();	// TODO: move to Tuning hierarchy

check for   Serial.clear();	// Teensy?

use ESP_ARDUINO_VERSION https://github.com/espressif/arduino-esp32/blob/master/cores/esp32/esp_arduino_version.h
see also: https://github.com/espressif/esp-idf/blob/master/components/esp_common/include/esp_idf_version.h

git add basic_menu

CONFIG_ARDUINO_IDF_COMMIT from config/sdkconfig.h header
	see: https://www.esp32.com/viewtopic.php?f=19&t=22333&sid=182b837b69a2e273a29f95570b39a739

Menu.h
  #if defined(TEENSYDUINO)	// just preparing (Menu on TEENSYDUINO is not working yet)

ePaper_GxEPD2.h 55 is
  GxEPD2_BW<GxEPD2_290, GxEPD2_290::HEIGHT> ePaper(GxEPD2_290(/*CS*/ 5, /*DC*/ 10, /*RST*/ 9, /*BUSY*/ 4));
  test new ePapers with
    //#define GxEPD2_DRIVER_CLASS GxEPD2_290     // GDEH029A1   128x296, SSD1608 (IL3820)
    //#define GxEPD2_DRIVER_CLASS GxEPD2_290_T5  // GDEW029T5   128x296, UC8151 (IL0373)
    //#define GxEPD2_DRIVER_CLASS GxEPD2_290_T5D // GDEW029T5D  128x296, UC8151D
    //#define GxEPD2_DRIVER_CLASS GxEPD2_290_T94 // GDEM029T94  128x296, SSD1680
    //#define GxEPD2_DRIVER_CLASS GxEPD2_290_M06 // GDEW029M06  128x296, UC8151 (IL0373)


TODO: extensions/FOREIGN/ should not contain libraries		DONE: moved to libraries/
In file included from /home/test/Arduino/pulses/extensions/FOREIGN/ESP32-Digital-RGB-LED-Drivers/src/esp32_digital_led_lib.cpp:44,
		 from /home/test/Arduino/pulses/extensions/pulses_RGB_LED_string.h:92,
		 from /home/test/Arduino/pulses/pulses.ino:1122:
/home/test/.arduino15/packages/esp32/hardware/esp32/2.0.0-rc1/tools/sdk/esp32/include/esp_hw_support/include/esp_intr.h:16:2: warning: #warning esp_intr.h is deprecated, please include esp_intr_alloc.h instead [-Wcpp]
 #warning esp_intr.h is deprecated, please include esp_intr_alloc.h instead
  ^~~~~~~

how to deal with that one?
	/home/test/Arduino/libraries/Menu/Menu.cpp:1525:12: warning: multi-character character constant [-Wmultichar]
	case 'ß':  // some broken configuration sends 'ß' instead of '?', silently accept


TODO: RGB_STRINGS_MAX should *NOT* change size of pulses_hardware_conf_t !!!
  how many data pins for RGB strings are available?
./pulses/pulses.ino 170:#define RGB_STRINGS_MAX		1	// 8 "possible"
./pulses/pulses.ino 225:  uint8_t rgb_pin[RGB_STRINGS_MAX]={RGB_LED_STRIP_DATA_PIN};		// %4	TODO: FIX ALIGNEMENT

TEST: in esp_now_ID_2_list()
    esp_now_pulses_known_peers[peer].preName[b] = (*ID_p).preName[b];

menu input giving 248 (flipped question mark)

ePaper: show prename on change
	no obsolete screen updates
	do not show pitch
	move name up

// TODO: touch_threshold should go to HARDWARE

TODO: morse input feedback is not working on ePaper

+#define OLED_HALT_PIN0	// see: monochrome_show_program_version()	// TODO: test with LilyGo T5_2.13

#define DEBUG_ePAPER_MORSE_FEEDBACK	// TODO: remove

battery handling logging
test&trimm new  BATTERY_LEVELS_DOUBLED

for i2c EEPROM in tinyRTC use
  https://github.com/WifWaf/AT24CM01/blob/master/src/AT24CM01.h

play_cnt, boot_cnt, trigger_cnt

for GY-530
  VL53LOX library

bool check_for_rtc_module() {	// TODO: FIXME: RTC and mpu6050 might be on same address!

test APDS9960 prox (and rgb) sensor

MENU.out(F("TODO: IMPLEMENT "));    MENU.outln(F("logging battery"));

put ESP_NOW_CHANNEL	in HARDWARE, done see: HARDWARE.esp_now_channel
    TODO: USE HARDWARE.esp_now_channel
	  UI?
    MENU.outln(F("\tuses ESP-NOW"));	// TODO: ESP_NOW_CHANNEL, HARDWARE.esp_now_channel

#define ESP_NOW_SECOND_CHAN_NONE	// use *NEW* ESP_NOW_CHANNEL implementation	TODO: test and REMOVE older version
why does channel 4 not work well???

#if defined HAS_DISPLAY && ! defined TRIGGERED_MUSICBOX2
  delay(3000);	// sorry for that	TODO: check that...
#endif

switch ePaper off (during long debugging sessions)
switch morse input off (on public installations)
dito esp-now	(maybe already done?)

multiple wakeup sources
	 trigger
	 GPI39
	 radar
	 trigger
	 morse

implement working battery managment
switch RBG string depending battery charge

nvs	  rgb_string_config_t RGBstringConf; 'L' 'L?' 'L!' 'LL'

double MENU.calculate_double(double default)
use in RGB configuration

TODO: morse output on RGB string ;)
      bar display on RGB string...

what is with ESP_ARDUINO_VERSION_MAJOR ???

display midi_baudrate_div10 and MIDI_BAUDRATE on startup and in nvs menu (HARDWARE)

TODO: TEST:  if(mac_addr == NULL)

TODO: fix #warning MPU6050 and RTC_MODULE use the same i2c address, USE_RTC_MODULE *deactivated*

please display less	#warning "using a NOOP fake F() macro."

NOT USING HW BLUETOOTH PIN any more

FIXME: in menu nvs 'LX' should not delete all nvs keys!!!!

LOG reboot cause (reboot, trigger, ...)

TODO: test stack sizes:
      MC_DISPLAY_STACK_SIZE
      pulses_RGB_LED_string.h	multicore_rgb_string_draw()
      morse.h			trigger_token_duration_feedback()
      mpu6050_module.h		MC_SAMPLE_MCU_STACK_SIZE
      multicore_display_common.h MC_do_on_other_core(void (*function_p)(), stack_size=16*1024) {}
      simple_do_from_other_core.h do_on_other_core(void (*function_p)(), int stack_size=16*1024) {}

TODO: FIXME: stack overflow crashes...

TODO: IMPLEMENT LOGGING BATTERY

TODO: #error "ePaper_DEPG0290B_LILYGO_0290 does not work yet"	TEST: maybe it does now on new GxEPD2 version?

TODO: experimental	#define NEW_LOOP_TASK_STACK_SIZE	16*1024
// see: https://github.com/espressif/arduino-esp32/blob/master/libraries/ESP32/examples/ArduinoStackSize/ArduinoStackSize.ino
SET_LOOP_TASK_STACK_SIZE(16*1024); // 16KB
#
In components/freertos/tasks.c:117

#define tskIDLE_STACK_SIZE 512
#define tskIDLE_STACK_SIZE 1024
#
-*- mode: grep; default-directory: "~/.arduino15/packages/esp32/hardware/esp32/2.0.4/" -*-
find . -type f -exec grep --color -nH --null -e CONFIG_FREERTOS_IDLE_TASK_STACKSIZE \{\} +
./tools/sdk/esp32/sdkconfig 1084:CONFIG_FREERTOS_IDLE_TASK_STACKSIZE=1024
./tools/sdk/esp32/dio_qspi/include/sdkconfig.h 382:#define CONFIG_FREERTOS_IDLE_TASK_STACKSIZE 1024
./tools/sdk/esp32/qout_qspi/include/sdkconfig.h 382:#define CONFIG_FREERTOS_IDLE_TASK_STACKSIZE 1024
./tools/sdk/esp32/include/freertos/include/esp_additions/freertos/FreeRTOSConfig.h 187:#define configIDLE_TASK_STACK_SIZE CONFIG_FREERTOS_IDLE_TASK_STACKSIZE
./tools/sdk/esp32/dout_qspi/include/sdkconfig.h 382:#define CONFIG_FREERTOS_IDLE_TASK_STACKSIZE 1024
./tools/sdk/esp32/qio_qspi/include/sdkconfig.h 382:#define CONFIG_FREERTOS_IDLE_TASK_STACKSIZE 1024

// TODO: TEST: task priorities:
morse.h			MORSE_DURATION_TASK_PRIORITY,	// task priority
extensions/pulses_RGB_LED_string.h	RGB_LED_STRING_TASK_PRIORITY,	// task priority
mpu6050_module.h	MPU6050_SAMPLE_TASK_PRIORITY,	// task priority

DEBUG: morse_MUX
used in:
     morse_feedback_d()
	pulse payload

     start_morse_feedback_d_pulse()	(MUX removed)
	touch_morse_ISR_v3

     touch_morse_ISR_v3()		with MUX
	ISR

     check_and_treat_morse_events_v3()	with MUX
	polled from pulses L2671

     morse_received_token()		(MUX removed)
	check_and_treat_morse_events_v3()
	morse_poll_letter_separation()


touch_threshold should go to HARDWARE
automagic touch_threshold on startup

start_musicbox() separe configuration and start

UI for ESP-NOW CHANNEL
feedback when reading it from HARDWARE_nvs

REMOVE: NO_BLUETOOTH_SERIAL_ON_VERSION1
REMOVE: '*NOT* respecting USE_BLUETOOTH_SERIAL_MENU on older ESP32-ARDUINO versions...'

(F("restarting after "));
(F(" seconds"));
(F("menu interaction"));
(F("y0"));
(F("hibernate()"));
(F("restarting after "));
(F(" seconds"));
(F("when done do: "));
(F("();"));
(F("OFF");
(F("set_MusicBoxState: butler removed"));
(F("butler not at id "));
(F("set_MusicBoxState: surviving butlers: "));
(F("ENDING");
(F("SLEEPING");
(F("SNORING");
(F("AWAKE");
(F("FADE");
(F("(unknown)");
(F("unknown MusicBoxState"));
(F("MusicBoxState "));
(F("tabula rasa\t"));
(F("no primary pulses"));
(F("S("));
(F(")\t"));
(F("no scale, no cycle"));
(F("harmonical CYCLE: "));
(F("\t2^"));
(F(" SUBCYCLE: | "));
(F("\nharmonical cycle:"));
(F("no scale, no cycle"));
(F("shortest pulse's harmonical cycle: "));
(F("TODO: maybe give subcycle infos?"));
(F("(2^"));
(F(") "));
(F("over"));
(F("\tw="));
(F("\tnow="));
(F("start_soft_ending("));
(F(") main part "));
(F("playing ended "));
(F("musicBox *was* OFF"));
(F("manual mode"));
(F("random mode"));
(F(" subcycles added 'til soft_end"));
(F("set_metric_pitch("));
(F(")"));
(F("metric pitch not changed\t"));
(F("invalid metric pitch "));
(F("semitone "));
(F("cent\t "));
(F("entune_basic_musicbox_pulses()"));
(F("'T'=tuning 'T?'=?\t'TM'=toggle metric"));
(F("\t'TZ<num>'=(int)hertz\t'T!'=tune"));
(F("\t'T<num>'=select scale"));
(F("'T[ABHCDEFG]'=select metric key ("));
(F(")\t'T+' 'T-'=chromatic up|down tuning\n"));
(F("PITCH: "));
(F(" metric "));
(F("SCALE: "));
(F("metric alternative tuning"));
(F("GUITAR TUNING"));
(F("set tuning to frequency in hertz "));
(F("tuned to "));
(F("tuned to "));
(F("' action muting"));
   "'M'=muting actions: 'MH''MM''MB''ML'=toggle HIGH,MELODY,BASS,LOW'M<n>'=~notes'MX'=~selected"));
   "'MT'='M0'=mute all'ME'='MA'=all on 'MO'=mute top octave'MQ'=unmute top octave"));
   "'MI'= ~ MIDI"));
(F("MIDI"));
(F("all MUTED"));
(F("all unmuted"));
(F("mute toggle "));
(F("mute toggle HIGH"));
(F("mute toggle MELODY"));
(F("mute toggle BASS"));
(F("mute toggle LOW"));
(F("toggle action muting"));
(F("muted "));
(F("unmuted "));
(F("PRESET: "));
(F("SYNC: "));
(F(" p["));
(F("]|"));
(F("iCode: "));
(F("JIFFLE: "));
(F("pitch.divisor==0"));
(F("pitch_normalised *negative*"));
(F("normalised pitch "));
(F("name = F(\""));
(F("\");"));
(F("date = F(\""));
(F("\");"));
(F("select_in(SCALES, "));
(F(");"));
(F("select_in(JIFFLES, "));
(F(");"));
(F("select_in(iCODEs, "));
(F(");"));
(F("sync = "));
(F("stack_sync_slices = "));
(F("// base_pulse = "));
(F("pitch = {"));
(F(", "));
(F("};"));
(F("chromatic_pitch = "));
(F(";\t// "));
(F("// subcycle_octave = "));
(F("// cycle "));
(F(" subcycle | "));
(F("name:"));
(F("date:"));
(F("SCALE:"));
(F("JIFF:"));
(F("iCODE:"));
(F("SYNC:"));
(F("synS:"));
(F("pul*:"));
(F("PITCH:"));
(F("chrom:"));
(F("chmnm:"));
(F("cyc_o:"));
(F("HARD_END_playing()\t"));
(F("played "));
(F("HARD END"), true);
(F("trigger enabled "));
(F("trigger blocked"));
(F("musicBox_trigger_ISR unknown state"));
(F("MUSICBOX_TRIGGER ON\t"));
(F("musicBox_trigger_OFF\t"));
(F("\nTRIGGERED!"));
(F("magical_cleanup() "));
(F(" = "));
(F("inactivity stop\t"));
(F("waiting "));
(F("inactive("));
(F(") "));
(F("END reached\t"));
(F("stop_on_LOW"));
(F("stop_on_LOW_H1 "));
(F("remove primary"));
(F("butler: prepare trigger"));
(F("butler: prepare hard end "));
(F("POWER LOW"));
(F("butler: MUSICBOX_HARD_END_SECONDS "));
(F("butler: lonely butler quits "));
(F("butler: "));
(F("FULL CYCLE SOFT ENDING"));
(F("butler: time to stop "));
(F("s clean "));
(F(" | "));
(F("random scale"));
(F("random iCode"));
(F("random jiffle"));
(F("random *metric* tuning "));
(F("random octave shift: "));
(F("*2"));
(F("/2"));
(F("furzificate()"));
(F("*3 j"));
(F("*4/3 j"));
(F("*3/2 j S0n"));
(F("*3 j"));
(F("*6 j S0n"));
(F("*3 j"));
(F("jiffle: "));
(F("save to RTC memory\t"));
(F("restore from RTCmem "));
(F("no"));
(F("data ok "));
(F("SCALE "));
(F("SYNC "));
(F("stack | "));
(F("iCode "));
(F("JIFFLE "));
(F("PITCH "));
(F("pause\t"));
(F("\nstart_musicBox()\t"));
(F("start_musicBox()preset "), true);
(F(" \""));
(F("trigger pin: "));
(F("power accepted"));
(F(">>> NO POWER <<<"));
(F("random pitch\t"));
(F("notes/octave "));
(F("set "));
(F("fixed "));
(F("hue slices "));
(F("normalised_pitch "));
(F("\n >>> * <<<"));
(F("date="));
(F("skipped\t"));
(F("no pause autoskip"));
(F("relax p["));
(F("magical_stress_release() V"));
(F("magical_fart_ISR()\t"));
(F("magical_FART\t"));
(F("light_sleep()\t"));
(F("esp_bluedroid_disable()"), esp_bluedroid_disable());
(F("esp_bt_controller_disable()"), esp_bt_controller_disable());
(F("esp_sleep_pd_config()"));
(F("esp_sleep_pd_config()"));
(F("esp_sleep_enable_ext0_wakeup()"));
(F("gpio_wakeup_enable()"));
(F("esp_sleep_enable_gpio_wakeup"));
(F("esp_sleep_enable_uart_wakeup(0)"));
(F("esp_sleep_enable_uart_wakeup(1)"));
(F("sleep well..."));
(F("esp_light_sleep_start()"
(F("\nAWOKE\t"));
(F("esp_bluedroid_enable()"));
(F("esp_bt_controller_enable(ESP_BT_MODE_CLASSIC_BT)"), \
(F("esp_bt_controller_enable((esp_bt_mode_t) 0x02)"), \
(F("esp_bluedroid_enable()"));
(F("wakeup undefined"));
(F("HACK: restart anyway "));
(F("wakeup EXT0\t"));
(F(">>>> WAKEUP TRIGGERED\t\t|"));
(F("wakeup gpio"));
(F("deep_sleep()\t"));
(F("esp_sleep_enable_ext0_wakeup()"));
(F("rtc_gpio_isolate DAC"));
(F("pausing...\t"));
(F("esp_deep_sleep_start()"));
(F("musicBox trigger pin:\t"));
(F("disable retriggering:\t"));
(F("max subcycle seconds:\t"));
(F("hard stop:\t\t"));
(F("esp_sleep_enable_ext0_wakeup()"));
(F("too many voices"));
(F("bass %imid %ihigh %iv=%i"
(F("'A[BMH]<n>'= voices Bass["));
(F("] Middle["));
(F("] High["));
   "The Harmonical Music Boxhttp://github.com/reppr/pulses/\n"));
(F("MusicBoxState "));
(F("butler "));
(F(" = "));
(F(" = "));
(F("harmonical cycle 'c'\t"));
(F("2^"));
(F(" subcycle| "));
(F("| \tslices '&' "));
   "subcycle octave 'O+' 'O-'\tresync/restart now 'N'\t't' metric tuning"));
(F("'F' "));
(F("un"));
(F("freeze parameters"));
(F("'o' show position ticker"));
(F("\t'p' show cycle pattern 'p*' toggle"));
(F("'a' autochanges"));
(F("'c' cycle "));
(F("soft_end("));
   ")\t'd'=days to survive'l'=level minimal age 'E'= start soft end now'w' minimal weight "));
(F("hard end='H'"));
   "'L'=stop when low\t'LL'=stop only low\thard end='H'"));
   "'EF[DLHRUP]'deep_sleep, light_sleep, hibernate, restart, user, presets\t"));
   "'C<macro>'=send macro 'CC<num>'=recipient 'C?'=peers 'C'='CC'=build net 'CCS'=automagic sync landscape"));
(F("'CCD<num>'=delete recipient"));
(F("'v' peripheral power"));
   "'V'=volume 'VE'vol=1.0 'VT..'volume- 'VM'=MIDIvolume'VV'=voices '|' sync slices ="));
(F("'|b' base ="));
(F("'P'="));
(F("START"));
(F("STOP"));
(F("\t'P1'= stop primary\t'P2'= stop secondary"));
(F("\t'W<seconds>' = wait&start"));
(F("'m'= set mode\t'mm' 'mM'= manual\t'ma' 'mA'= automagic"));
   "\n'P?'=show preset names\t'P\"xxx\" = 'PNxxx' search in preset list"));
DADA
(F("*no* MPU6050"));
(F("'I'= info\t"));
(F("fart='f'"));
(F("PRESET "));
(F("sync_landscape_time_sliced()my sync "));
(F("'U'=toggle AccelGyro\t 'X' 'Y' 'Z' toggle axes on|off"));
(F("'U0'='U='restart\t'UP'=accGyroPreset\t'UT'=tuning"));
(F("'UUS'='UUSM..'=sync shift scale double\t'UUSD..'=halve"));
(F("sync shift scaling "));
(F("TUNING"));
(F("accGyro_preset 1"));
(F("accGyro_preset "));
(F("TUNING"));
(F("accGyro_preset 1"));
(F("accGyro_preset "));
extended_output(F("MPU6050 not available"), 0,0,false);
//		(F("TODO: implement"));
//		(F("TODO: implement"));
//		(F("TODO: implement"));
//		(F("TODO: implement"));
//		(F("TODO: implement"));
(F("accGyro_preset "));
(F("autochanges"));
(F("hibernate() *DEACTIVATED* "));
(F("end_days_to_live "));
(F("end_survive_level "));
(F("fully "));
(F("cleanup minimal weighting "));
(F("set sync of instruments to time slice "));
(F("sync =\t"));
(F("*no* sender time slice\t"));
(F("delete peer <nnn>\t"));
(F("???"));
(F("will send to ALL KNOWN peers"));
(F("will send to "));
(F("send NOW\t"));
(F("ESP_NOW not available"));
(F("cycle_slices "));
(F("SHOW"));
(F("do *not show*"));
(F(" position in circle"));
(F(" were high "));
(F(" were high "));
(F("*NO* rgb led string code"));
(F("kill primary "));
(F("kill secondary "));
(F("delay, then start "));
(F("is PLAYING, ignored"));
(F("SHOW"));
(F("do *not show*"));
(F(" cycle pattern"));
(F("SCALE: "));
(F("toggled pulses "));
(F(" to "));
(F("fixed metric tunings"));
(F("stacked_sync | "));
(F("base_pulse "));
